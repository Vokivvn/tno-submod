ENG_economy_decisions_calculate = {
		# These were experimental bits, depreciated 
		### ENGLISH ECONOMY SYSTEM BELOW ###
				set_variable = { working_pop = 0.8 }
				set_variable = { dev_tech_GDP_bonus = 1 }
				# These are required temp var for ENG_SE_GDPUpdate due to check_variable issues
				set_variable = { workPop_temp = 0 } 
				set_variable = { econ_temp_var = 0 } 
								
				every_owned_state = {
					add_to_variable = { ENG.econ_temp_var = state_population_k }
				}
				every_owned_state = {
					#Get the total working population
					set_temp_variable = { workPop = state_population_k } #pop in the thousands
					multiply_temp_variable = { workPop = ENG.working_pop }
					
					#Getting unemployment of 20-25%
					randomize_temp_variable = {
						var = unemploymentTemp
						min = 20
						max = 25 
					}					
					set_variable = { unemployment = unemploymentTemp }
					divide_variable = { unemployment = 100 }
					
					#Setting up the job distribution such that 5-10% of all jobs are foreign jobs
					randomize_temp_variable = {
						var = job_ratio
						distribution = uniform
						min = 90
						max = 95 
					}	
					set_variable = { domestic_business_ratio = job_ratio }
					divide_variable = { domestic_business_ratio = 100 }
					
					#Get the amount of employed working population 
					set_temp_variable = { employPop = 1 }
					subtract_from_temp_variable = { employPop = unemployment }
					multiply_variable = { employPop = workPop }
					
					#Set the number of domestic and foreign jobs
					set_variable = { domestic_jobs = employPop }
					multiply_variable = { domestic_jobs = domestic_business_ratio }
					multiply_variable = { domestic_jobs = state_population_k }
					multiply_variable = { domestic_jobs = ENG.working_pop }
					set_variable = { foreign_jobs = 1 }
					subtract_from_variable = { foreign_jobs = domestic_business_ratio }
					multiply_variable = { foreign_jobs = employPop }
					multiply_variable = { foreign_jobs = state_population_k }
					multiply_variable = { foreign_jobs = ENG.working_pop }
					
					#Filler values below
					set_variable = { domestic_job_growth = 0.05 }
					set_variable = { foreign_job_growth = 0.05 }
					
					#Calculate state GDP relative to population
					set_temp_variable = { state_GDP_temp = state_population_k }
					divide_temp_variable = { state_GDP_temp = ENG.econ_temp_var }
					multiply_temp_variable = { state_GDP_temp = ENG.GDP }
					set_variable = { state_GDP = state_GDP_temp } #in millions
					#Change existing TNO state GDP to match
					set_variable = { state_value = state_GDP } 
					
					#Assuming domestic/foreign GDP value is same for now
					#Thus divide state GDP by employed pop to get value
					set_temp_variable = { total_jobs = domestic_jobs }
					add_to_temp_variable = { total_jobs = foreign_jobs }
					set_variable = { domestic_GDP_value = state_GDP } #in millions per 1000 jobs
					divide_variable = { domestic_GDP_value = total_jobs }
					set_variable = { foreign_GDP_value = domestic_GDP_value } #in millions per 1000 jobs
					
					#Get GDP per capita
					set_variable = { GDP_per_capita = state_GDP }
					divide_variable = { GDP_per_capita = workPop }
					multiply_variable = { GDP_per_capita = 1000 }	#in millions; multiply as workPop is in thousands
					round_variable = GDP_per_capita
	}
				
	set_temp_variable = { ENG_total_GDP = 0 }
	set_temp_variable = { ENG_working_population = 0 }
	set_temp_variable = { ENG_population_overall = 0 }
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1300
				}
				FEN = {
					owns_state = 1300
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1300.unemployment } add_to_temp_variable = { ENG_total_GDP = 1300.state_GDP }
		set_temp_variable = { ENG_1300_population = 1300.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1300.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1300.foreign_jobs }
		multiply_temp_variable = { ENG_1300_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1300_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 126
				}
				FEN = {
					owns_state = 126
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 126.unemployment } add_to_temp_variable = { ENG_total_GDP = 126.state_GDP }
		set_temp_variable = { ENG_126_population = 126.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 126.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 126.foreign_jobs }
		multiply_temp_variable = { ENG_126_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_126_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 125
				}
				FEN = {
					owns_state = 125
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 125.unemployment } add_to_temp_variable = { ENG_total_GDP = 125.state_GDP }
		set_temp_variable = { ENG_125_population = 125.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 125.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 125.foreign_jobs }
		multiply_temp_variable = { ENG_125_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_125_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 129
				}
				FEN = {
					owns_state = 129
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 129.unemployment } add_to_temp_variable = { ENG_total_GDP = 129.state_GDP }
		set_temp_variable = { ENG_129_population = 129.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 129.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 129.foreign_jobs }
		multiply_temp_variable = { ENG_129_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_129_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 127
				}
				FEN = {
					owns_state = 127
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 127.unemployment } add_to_temp_variable = { ENG_total_GDP = 127.state_GDP }
		set_temp_variable = { ENG_127_population = 127.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 127.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 127.foreign_jobs }
		multiply_temp_variable = { ENG_127_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_127_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 130
				}
				FEN = {
					owns_state = 130
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 130.unemployment } add_to_temp_variable = { ENG_total_GDP = 130.state_GDP }
		set_temp_variable = { ENG_130_population = 130.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 130.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 130.foreign_jobs }
		multiply_temp_variable = { ENG_130_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_130_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 131
				}
				FEN = {
					owns_state = 131
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 131.unemployment } add_to_temp_variable = { ENG_total_GDP = 131.state_GDP }
		set_temp_variable = { ENG_131_population = 131.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 131.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 131.foreign_jobs }
		multiply_temp_variable = { ENG_131_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_131_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 132
				}
				FEN = {
					owns_state = 132
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 132.unemployment } add_to_temp_variable = { ENG_total_GDP = 132.state_GDP }
		set_temp_variable = { ENG_132_population = 132.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 132.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 132.foreign_jobs }
		multiply_temp_variable = { ENG_132_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_132_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 128
				}
				FEN = {
					owns_state = 128
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 128.unemployment } add_to_temp_variable = { ENG_total_GDP = 128.state_GDP }
		set_temp_variable = { ENG_128_population = 128.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 128.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 128.foreign_jobs }
		multiply_temp_variable = { ENG_128_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_128_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 885
				}
				FEN = {
					owns_state = 885
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 885.unemployment } add_to_temp_variable = { ENG_total_GDP = 885.state_GDP }
		set_temp_variable = { ENG_885_population = 885.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 885.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 885.foreign_jobs }
		multiply_temp_variable = { ENG_885_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_885_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 777
				}
				FEN = {
					owns_state = 777
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 777.unemployment } add_to_temp_variable = { ENG_total_GDP = 777.state_GDP }
		set_temp_variable = { ENG_777_population = 777.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 777.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 777.foreign_jobs }
		multiply_temp_variable = { ENG_777_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_777_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 338
				}
				FEN = {
					owns_state = 338
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 338.unemployment } add_to_temp_variable = { ENG_total_GDP = 338.state_GDP }
		set_temp_variable = { ENG_338_population = 338.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 338.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 338.foreign_jobs }
		multiply_temp_variable = { ENG_338_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_338_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1301
				}
				FEN = {
					owns_state = 1301
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1301.unemployment } add_to_temp_variable = { ENG_total_GDP = 1301.state_GDP }
		set_temp_variable = { ENG_1301_population = 1301.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1301.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1301.foreign_jobs }
		multiply_temp_variable = { ENG_1301_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1301_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 122
				}
				FEN = {
					owns_state = 122
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 122.unemployment } add_to_temp_variable = { ENG_total_GDP = 122.state_GDP }
		set_temp_variable = { ENG_122_population = 122.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 122.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 122.foreign_jobs }
		multiply_temp_variable = { ENG_122_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_122_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 123
				}
				FEN = {
					owns_state = 123
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 123.unemployment } add_to_temp_variable = { ENG_total_GDP = 123.state_GDP }
		set_temp_variable = { ENG_123_population = 123.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 123.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 123.foreign_jobs }
		multiply_temp_variable = { ENG_123_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_123_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1296
				}
				FEN = {
					owns_state = 1296
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1296.unemployment } add_to_temp_variable = { ENG_total_GDP = 1296.state_GDP }
		set_temp_variable = { ENG_1296_population = 1296.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1296.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1296.foreign_jobs }
		multiply_temp_variable = { ENG_1296_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1296_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1375
				}
				FEN = {
					owns_state = 1375
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1375.unemployment } add_to_temp_variable = { ENG_total_GDP = 1375.state_GDP }
		set_temp_variable = { ENG_1375_population = 1375.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1375.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1375.foreign_jobs }
		multiply_temp_variable = { ENG_1375_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1375_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 121
				}
				FEN = {
					owns_state = 121
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 121.unemployment } add_to_temp_variable = { ENG_total_GDP = 121.state_GDP }
		set_temp_variable = { ENG_121_population = 121.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 121.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 121.foreign_jobs }
		multiply_temp_variable = { ENG_121_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_121_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1321
				}
				FEN = {
					owns_state = 1321
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1321.unemployment } add_to_temp_variable = { ENG_total_GDP = 1321.state_GDP }
		set_temp_variable = { ENG_1321_population = 1321.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1321.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1321.foreign_jobs }
		multiply_temp_variable = { ENG_1321_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1321_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 133
				}
				FEN = {
					owns_state = 133
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 133.unemployment } add_to_temp_variable = { ENG_total_GDP = 133.state_GDP }
		set_temp_variable = { ENG_133_population = 133.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 133.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 133.foreign_jobs }
		multiply_temp_variable = { ENG_133_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_133_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1320
				}
				FEN = {
					owns_state = 1320
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1320.unemployment } add_to_temp_variable = { ENG_total_GDP = 1320.state_GDP }
		set_temp_variable = { ENG_1320_population = 1320.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1320.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1320.foreign_jobs }
		multiply_temp_variable = { ENG_1320_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1320_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 136
				}
				FEN = {
					owns_state = 136
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 136.unemployment } add_to_temp_variable = { ENG_total_GDP = 136.state_GDP }
		set_temp_variable = { ENG_136_population = 136.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 136.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 136.foreign_jobs }
		multiply_temp_variable = { ENG_136_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_136_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 120
				}
				FEN = {
					owns_state = 120
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 120.unemployment } add_to_temp_variable = { ENG_total_GDP = 120.state_GDP }
		set_temp_variable = { ENG_120_population = 120.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 120.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 120.foreign_jobs }
		multiply_temp_variable = { ENG_120_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_120_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 337
				}
				FEN = {
					owns_state = 337
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 337.unemployment } add_to_temp_variable = { ENG_total_GDP = 337.state_GDP }
		set_temp_variable = { ENG_337_population = 337.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 337.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 337.foreign_jobs }
		multiply_temp_variable = { ENG_337_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_337_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1322
				}
				FEN = {
					owns_state = 1322
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1322.unemployment } add_to_temp_variable = { ENG_total_GDP = 1322.state_GDP }
		set_temp_variable = { ENG_1322_population = 1322.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1322.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1322.foreign_jobs }
		multiply_temp_variable = { ENG_1322_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1322_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 119
				}
				FEN = {
					owns_state = 119
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 119.unemployment } add_to_temp_variable = { ENG_total_GDP = 119.state_GDP }
		set_temp_variable = { ENG_119_population = 119.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 119.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 119.foreign_jobs }
		multiply_temp_variable = { ENG_119_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_119_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1355
				}
				FEN = {
					owns_state = 1355
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1355.unemployment } add_to_temp_variable = { ENG_total_GDP = 1355.state_GDP }
		set_temp_variable = { ENG_1355_population = 1355.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1355.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1355.foreign_jobs }
		multiply_temp_variable = { ENG_1355_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1355_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1315
				}
				FEN = {
					owns_state = 1315
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1315.unemployment } add_to_temp_variable = { ENG_total_GDP = 1315.state_GDP }
		set_temp_variable = { ENG_1315_population = 1315.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1315.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1315.foreign_jobs }
		multiply_temp_variable = { ENG_1315_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1315_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1357
				}
				FEN = {
					owns_state = 1357
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1357.unemployment } add_to_temp_variable = { ENG_total_GDP = 1357.state_GDP }
		set_temp_variable = { ENG_1357_population = 1357.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1357.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1357.foreign_jobs }
		multiply_temp_variable = { ENG_1357_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1357_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 113
				}
				FEN = {
					owns_state = 113
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 113.unemployment } add_to_temp_variable = { ENG_total_GDP = 113.state_GDP }
		set_temp_variable = { ENG_113_population = 113.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 113.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 113.foreign_jobs }
		multiply_temp_variable = { ENG_113_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_113_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1374
				}
				FEN = {
					owns_state = 1374
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1374.unemployment } add_to_temp_variable = { ENG_total_GDP = 1374.state_GDP }
		set_temp_variable = { ENG_1374_population = 1374.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1374.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1374.foreign_jobs }
		multiply_temp_variable = { ENG_1374_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1374_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 135
				}
				FEN = {
					owns_state = 135
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 135.unemployment } add_to_temp_variable = { ENG_total_GDP = 135.state_GDP }
		set_temp_variable = { ENG_135_population = 135.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 135.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 135.foreign_jobs }
		multiply_temp_variable = { ENG_135_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_135_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 134
				}
				FEN = {
					owns_state = 134
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 134.unemployment } add_to_temp_variable = { ENG_total_GDP = 134.state_GDP }
		set_temp_variable = { ENG_134_population = 134.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 134.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 134.foreign_jobs }
		multiply_temp_variable = { ENG_134_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_134_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1356
				}
				FEN = {
					owns_state = 1356
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1356.unemployment } add_to_temp_variable = { ENG_total_GDP = 1356.state_GDP }
		set_temp_variable = { ENG_1356_population = 1356.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1356.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1356.foreign_jobs }
		multiply_temp_variable = { ENG_1356_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1356_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1358
				}
				FEN = {
					owns_state = 1358
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1358.unemployment } add_to_temp_variable = { ENG_total_GDP = 1358.state_GDP }
		set_temp_variable = { ENG_1358_population = 1358.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1358.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1358.foreign_jobs }
		multiply_temp_variable = { ENG_1358_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1358_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1352
				}
				FEN = {
					owns_state = 1352
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1352.unemployment } add_to_temp_variable = { ENG_total_GDP = 1352.state_GDP }
		set_temp_variable = { ENG_1352_population = 1352.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1352.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1352.foreign_jobs }
		multiply_temp_variable = { ENG_1352_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1352_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1353
				}
				FEN = {
					owns_state = 1353
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1353.unemployment } add_to_temp_variable = { ENG_total_GDP = 1353.state_GDP }
		set_temp_variable = { ENG_1353_population = 1353.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1353.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1353.foreign_jobs }
		multiply_temp_variable = { ENG_1353_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1353_population }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					owns_state = 1354
				}
				FEN = {
					owns_state = 1354
				}
			}
		}
		add_to_temp_variable = { ENG_total_unemployment = 1354.unemployment } add_to_temp_variable = { ENG_total_GDP = 1354.state_GDP }
		set_temp_variable = { ENG_1354_population = 1354.state_population_k }
		add_to_temp_variable = { ENG_population_overall = 1354.state_population_k }
		set_temp_variable = { foreign_jobs_non = 1 }
		subtract_from_temp_variable = { foreign_jobs_non = 1354.foreign_jobs }
		multiply_temp_variable = { ENG_1354_population = foreign_jobs_non }
		add_to_temp_variable = { ENG_state_count = 1 } add_to_temp_variable = { ENG_working_population = ENG_1354_population }
	}
	# soc dev impacts on GDP
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_academic_base_golden_age
				}
				FEN = {
					has_idea = tno_academic_base_golden_age
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.02 }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_research_facilities_cutting_edge
				}
				FEN = {
					has_idea = tno_research_facilities_cutting_edge
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.02 }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_agriculture_modern
				}
				FEN = {
					has_idea = tno_agriculture_modern
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.02 }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_industrial_equipment_cutting_edge
				}
				FEN = {
					has_idea = tno_industrial_equipment_cutting_edge
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.02 }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_industrial_expertise_experienced
				}
				FEN = {
					has_idea = tno_industrial_expertise_experienced
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.02 }
	}
	if = {
		limit = {
			OR = {
				ENG = {
					has_idea = tno_industrial_expertise_innovative
				}
				FEN = {
					has_idea = tno_industrial_expertise_innovative
				}
			}
		}
		multiply_temp_variable = { ENG_total_GDP = 1.04 }
	}
	divide_temp_variable = { ENG_total_unemployment = ENG_state_count }
	multiply_temp_variable = { ENG_working_population = 0.612 }
	set_temp_variable = { ENG_unemployment_top = ENG_working_population }
	set_temp_variable = { ENG_unemployment_bottom = ENG_working_population }
	multiply_temp_variable = { ENG_unemployment_top = ENG_total_unemployment }
	divide_temp_variable = { ENG_unemployment_top = ENG_unemployment_bottom }
	divide_temp_variable = { ENG_working_population = ENG_population_overall }
	set_variable = { ENG_working_pop_percent = ENG_working_population }
	set_variable = { ENG_unemployment_final = ENG_unemployment_top }
	set_variable = { ENG_total_GDP_final = ENG_total_GDP }
}

####################################
####### Collab Pre-ECW Gun Smuggling #######
####################################

ENG_SE_ClampCornwallRelations = {
	clamp_variable = {
		var = ENG_Cornwall_Relations
		min = 0
		max = 100
	}
}

ENG_SE_Collab_Guns = {
	# Fires the appropriate guns 'mission' based on flag set in decision
	if = {
		limit = { has_country_flag = Hmmlr_guns_small }
		ENG_SE_CollabGunsPlus_1000 = yes
	}
	else_if = {
		limit = { has_country_flag = Hmmlr_guns_medium }
		ENG_SE_CollabGunsPlus_5000 = yes
	}
	else_if = {
		limit = { has_country_flag = Hmmlr_guns_large }
		ENG_SE_CollabGunsPlus_9500 = yes
	}
}

ENG_SE_CollabGunsPlus_1000 = {
	# Small shipment goes through SW state with highest stability
	
	# Find highest stability
	set_temp_variable = { max_stab = 1300.ENG_StateStats_Stability }
	if = {
		limit = { check_variable = { 127.ENG_StateStats_Stability > max_stab } }
		set_temp_variable = { max_stab = 127.ENG_StateStats_Stability }
	}
	if = {
		limit = { check_variable = { 338.ENG_StateStats_Stability > max_stab } }
		set_temp_variable = { max_stab = 338.ENG_StateStats_Stability }
	}
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by HMMLR
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Collab_Guns = 100 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Collab_Guns = 50 }
		add_to_variable = { ENG_Hmmlr_Guns = 35 } 
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Collab_Guns = 25 }
		add_to_variable = { ENG_Hmmlr_Guns = 52 } 
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Hmmlr_Guns = 70 } 
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_small
}

ENG_SE_CollabGunsPlus_5000 = {
	# Medium shipment goes through the two SW states with highest stability
	
	# First get the three stability pairs
	set_temp_variable = { stab1 = 1300.ENG_StateStats_Stability }
	add_to_temp_variable = { stab1 = 127.ENG_StateStats_Stability }
	divide_temp_variable = { stab1 = 2 }
	set_temp_variable = { stab2 = 1300.ENG_StateStats_Stability }
	add_to_temp_variable = { stab2 = 338.ENG_StateStats_Stability }
	divide_temp_variable = { stab2 = 2 }
	set_temp_variable = { max_stab = 127.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 338.ENG_StateStats_Stability }
	divide_temp_variable = { max_stab = 2 }
	
	# Compare all three stability pairs to find max
	if = {
		limit = { check_variable = { stab1 > max_stab } }
		set_temp_variable = { max_stab = stab1 }
	}
	if = {
		limit = { check_variable = { stab2 > max_stab } }
		set_temp_variable = { max_stab = stab2 }
	}
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by HMMLR
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Collab_Guns = 500 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Collab_Guns = 250 }
		add_to_variable = { ENG_Hmmlr_Guns = 175 }
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Collab_Guns = 125 }
		add_to_variable = { ENG_Hmmlr_Guns = 262 }
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Hmmlr_Guns = 350 }
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_medium
}

ENG_SE_CollabGunsPlus_9500 = {
	# Large shipment goes through all three SW states
	
	# Get state stability average
	set_temp_variable = { max_stab = 1300.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 127.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 338.ENG_StateStats_Stability }
	divide_temp_variable = { max_stab = 3 }
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by HMMLR
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Collab_Guns = 950 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Collab_Guns = 475 }
		add_to_variable = { ENG_Hmmlr_Guns = 332 } 
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Collab_Guns = 237 }
		add_to_variable = { ENG_Hmmlr_Guns = 499 }
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Hmmlr_Guns = 665 }
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_large
}

####################################
####### HMMLR Pre-ECW Gun Smuggling #######
####################################

ENG_SE_Hmmlr_Guns = {
	# Fires the appropriate guns 'mission' based on flag set in decision
	if = {
		limit = { has_country_flag = Hmmlr_guns_small }
		ENG_SE_HmmlrGunsPlus_1000 = yes
	}
	else_if = {
		limit = { has_country_flag = Hmmlr_guns_medium }
		ENG_SE_HmmlrGunsPlus_5000 = yes
	}
	else_if = {
		limit = { has_country_flag = Hmmlr_guns_large }
		ENG_SE_HmmlrGunsPlus_9500 = yes
	}
	else_if = {
		limit = { has_country_flag = Hmmlr_guns_special }
		ENG_SE_HmmlrGunsSpecial = yes
	}
}

ENG_SE_HmmlrGunsPlus_1000 = {
	# Small shipment goes through NE state with highest stability
	
	# Find highest stability
	set_temp_variable = { max_stab = 130.ENG_StateStats_Stability }
	if = {
		limit = { check_variable = { 131.ENG_StateStats_Stability > max_stab } }
		set_temp_variable = { max_stab = 131.ENG_StateStats_Stability }
	}
	if = {
		limit = { check_variable = { 132.ENG_StateStats_Stability > max_stab } }
		set_temp_variable = { max_stab = 132.ENG_StateStats_Stability }
	}
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by Collabs
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 100 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 50 }
		add_to_variable = { ENG_Collab_Guns = 35 } 
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 25 }
		add_to_variable = { ENG_Collab_Guns = 52 } 
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Collab_Guns = 70 } 
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_small
}

ENG_SE_HmmlrGunsPlus_5000 = {
	# Medium shipment goes through the two NE states with highest stability
	
	# First get the three stability pairs
	set_temp_variable = { stab1 = 130.ENG_StateStats_Stability }
	add_to_temp_variable = { stab1 = 131.ENG_StateStats_Stability }
	divide_temp_variable = { stab1 = 2 }
	set_temp_variable = { stab2 = 130.ENG_StateStats_Stability }
	add_to_temp_variable = { stab2 = 132.ENG_StateStats_Stability }
	divide_temp_variable = { stab2 = 2 }
	set_temp_variable = { max_stab = 132.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 131.ENG_StateStats_Stability }
	divide_temp_variable = { max_stab = 2 }
	
	# Compare all three stability pairs to find max
	if = {
		limit = { check_variable = { stab1 > max_stab } }
		set_temp_variable = { max_stab = stab1 }
	}
	if = {
		limit = { check_variable = { stab2 > max_stab } }
		set_temp_variable = { max_stab = stab2 }
	}
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by Collabs
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 500 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 250 }
		add_to_variable = { ENG_Collab_Guns = 175 }
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 125 }
		add_to_variable = { ENG_Collab_Guns = 262 }
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Collab_Guns = 350 }
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_medium
}

ENG_SE_HmmlrGunsPlus_9500 = {
	# Large shipment goes through all three NE states
	
	# Get state stability average
	set_temp_variable = { max_stab = 130.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 131.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 132.ENG_StateStats_Stability }
	divide_temp_variable = { max_stab = 3 }
	
	# Determine outcome based on stability value. Assume 70% of "lost" guns taken by Collabs
	if = {
		limit = { check_variable = { max_stab > 69.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 950 }
		country_event = { id = ENG_ForShip.8 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 44.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 475 }
		add_to_variable = { ENG_Collab_Guns = 332 } 
		country_event = { id = ENG_ForShip.9 }
	}
	else_if = {
		limit = { check_variable = { max_stab > 19.9 } }
		add_to_variable = { ENG_Hmmlr_Guns = 237 }
		add_to_variable = { ENG_Collab_Guns = 499 }
		country_event = { id = ENG_ForShip.10 }
	}
	else = {
		add_to_variable = { ENG_Collab_Guns = 665 }
		country_event = { id = ENG_ForShip.11 }
	}
	clr_country_flag = Hmmlr_guns_large
}

ENG_SE_HmmlrGunsSpecial = {
	# Special shipment goes through all three NE states
	
	# Get state stability average
	set_temp_variable = { max_stab = 130.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 131.ENG_StateStats_Stability }
	add_to_temp_variable = { max_stab = 132.ENG_StateStats_Stability }
	divide_temp_variable = { max_stab = 3 }
	
	# Determine outcome based on stability value and prior successful shipments
	if = {
		limit = { 
			NOT = { has_country_flag = ENG_HMMLR_Tank_1 }
			NOT = { has_country_flag = ENG_HMMLR_Tank_2 }
			NOT = { has_country_flag = ENG_HMMLR_Tank_3 }
			check_variable = { max_stab > 69.9 } 
		}
		set_country_flag = ENG_HMMLR_Tank_1
		if = {
			limit = { 
				NOT = { has_country_flag = Hmmlr_special_shipment_1 }
			}
		country_event = { id = ENG_ForShip.14 }
		}
	}
	else_if = {
		limit = { 
			has_country_flag = ENG_HMMLR_Tank_1
			check_variable = { max_stab > 69.9 } 
		}
		clr_country_flag = ENG_HMMLR_Tank_1
		set_country_flag = ENG_HMMLR_Tank_2
		if = {
			limit = { 
				NOT = { has_country_flag = Hmmlr_special_shipment_1 }
			}
		country_event = { id = ENG_ForShip.14 }
		}
	}
	else_if = {
		limit = { 
			has_country_flag = ENG_HMMLR_Tank_2
			check_variable = { max_stab > 69.9 } 
		}
		clr_country_flag = ENG_HMMLR_Tank_2
		set_country_flag = ENG_HMMLR_Tank_3
		if = {
			limit = { 
				NOT = { has_country_flag = Hmmlr_special_shipment_1 }
			}
		country_event = { id = ENG_ForShip.14 }
		}
	}	
	else = {
		country_event = { id = ENG_ForShip.15 }
	}
	clr_country_flag = Hmmlr_guns_special
}

ENG_SE_ClampOFNRelations = {
	clamp_variable = {
		var = ENG_OFN_Relations
		min = 0
		max = 100
	}
}

ENG_SE_ConvertGunsToEquipment = {
    #This converts remaining guns into WW1 infantry equipment at a 10:1 ratio
    clamp_variable = {
        var = ENG.ENG_Hmmlr_Guns
        min = 0
        max = 990000
    }
    clamp_variable = {
        var = ENG.ENG_Collab_Guns
        min = 0
        max = 990000
    }
    round_variable = ENG.ENG_Hmmlr_Guns
    round_variable = ENG.ENG_Collab_Guns
    FEN = {
        add_equipment_to_stockpile = {
            type = infantry_equipment_0
            amount = ENG.ENG_Hmmlr_Guns
            producer = FEN
        }
    }
    ENG = {
        add_equipment_to_stockpile = {
            type = infantry_equipment_0
            amount = ENG.ENG_Collab_Guns
            producer = ENG
        }
    }    
}

###################################
####### English Civil War (ECW) OOBs #######
###################################

ENG_SE_EnglishCivlWarOOB = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOB; Executing"
	# This determines the ECW OOB to load
	# Get the HMMLR support averages for each region
	ENG_SE_ConvertGunsToEquipment = yes
	set_variable = { north_HmmlrSupport = 130.ENG_StateStats_HmmlrSupport }
	add_to_variable = { north_HmmlrSupport = 131.ENG_StateStats_HmmlrSupport }
	add_to_variable = { north_HmmlrSupport = 129.ENG_StateStats_HmmlrSupport }
	divide_variable = { north_HmmlrSupport = 3 }
	set_variable = { west_HmmlrSupport = 132.ENG_StateStats_HmmlrSupport }
	add_to_variable = { west_HmmlrSupport = 128.ENG_StateStats_HmmlrSupport }
	add_to_variable = { west_HmmlrSupport = 885.ENG_StateStats_HmmlrSupport }
	divide_variable = { west_HmmlrSupport = 3 }
	set_variable = { south_HmmlrSupport = 777.ENG_StateStats_HmmlrSupport }
	add_to_variable = { south_HmmlrSupport = 338.ENG_StateStats_HmmlrSupport }
	add_to_variable = { south_HmmlrSupport = 127.ENG_StateStats_HmmlrSupport }
	divide_variable = { south_HmmlrSupport = 3 }
	set_variable = { london_HmmlrSupport = 1300.ENG_StateStats_HmmlrSupport }
	add_to_variable = { london_HmmlrSupport = 126.ENG_StateStats_HmmlrSupport }
	add_to_variable = { london_HmmlrSupport = 125.ENG_StateStats_HmmlrSupport }
	divide_variable = { london_HmmlrSupport = 3 }
	
	# Determine if 100% HmmlrSupport outcome based on HMMLR support averages
	# Note: Temporarily removed pending rework
#	if = {
#		limit = {
#			check_variable = { north_HmmlrSupport > 69.99 } 
#			check_variable = { west_HmmlrSupport > 69.99 } 
#			check_variable = { south_HmmlrSupport > 69.99 } 
#			check_variable = { london_HmmlrSupport > 69.99 } 
#		}
#		#load 100% HMMLR OOB 
#		FEN = {
#			set_state_controller = 338
#			set_province_controller = 296
#			load_oob = "ECW_TotalHMMLR_HMMLR"
#			add_equipment_to_stockpile = { type = infantry_equipment amount = 940 producer = ENG }
#			add_equipment_to_stockpile = { type = artillery_equipment amount = 29 producer = ENG }
#			add_equipment_to_stockpile = { type = support_equipment amount = 48 producer = ENG }
#			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 92 producer = ENG }
#			add_equipment_to_stockpile = { type = motorized_equipment amount = 88 producer = ENG }
#			add_equipment_to_stockpile = { type = IFV_equipment amount = 16 producer = ENG }
#		}
#		ENG = {
#			set_province_controller = 6270
#			set_province_controller = 9315
#			set_province_controller = 3241
#			set_province_controller = 3301
#			load_oob = "ECW_TotalHMMLR_Collab"
#			add_equipment_to_stockpile = { type = infantry_equipment amount = 645 producer = ENG }
#			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
#			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
#			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
#		}
#	}
#	else_if = {
#		limit = { 
#			check_variable = { north_HmmlrSupport < 30.01 }
#			check_variable = { west_HmmlrSupport < 30.01 }
#			check_variable = { south_HmmlrSupport < 30.01 }
#			check_variable = { london_HmmlrSupport < 30.01 }
#		}
#		#load 100% Gov OOB
#		FEN = {
#			load_oob = "ECW_TotalCollab_HMMLR"
#			add_equipment_to_stockpile = { type = infantry_equipment amount = 645 producer = ENG }
#			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
#			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
#			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
#		}
#		ENG = {
#			set_province_controller = 11332
#			set_province_controller = 6399
#			set_province_controller = 9322
#			set_province_controller = 9250
#			set_province_controller = 3353
#			load_oob = "ECW_TotalCollab_Collab"
#			add_equipment_to_stockpile = { type = infantry_equipment amount = 940 producer = ENG }
#			add_equipment_to_stockpile = { type = artillery_equipment amount = 29 producer = ENG }
#			add_equipment_to_stockpile = { type = support_equipment amount = 48 producer = ENG }
#			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 92 producer = ENG }
#			add_equipment_to_stockpile = { type = motorized_equipment amount = 88 producer = ENG }
#			add_equipment_to_stockpile = { type = IFV_equipment amount = 16 producer = ENG }
#		}
#	}
	# Failing the 100% outcomes, load individual region OOBs
#	else = {
		ENG_SE_EnglishCivlWarOOBNorth = yes
		ENG_SE_EnglishCivlWarOOBWest = yes
		ENG_SE_EnglishCivlWarOOBSouth = yes
		ENG_SE_EnglishCivlWarOOBLondon = yes
#	}
	# Do other SE OOB loading here as needed
	ENG_SE_EnglishCivlWarOOBFENTank = yes
	FEN = { load_oob = "ECW_Air_HMMLR" }
	ENG = { load_oob = "ECW_Air_Collab" }
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOB; Completed execution"
}

ENG_SE_EnglishCivlWarOOBNorth = {	
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBNorth; Executing"
	# Determine if 100% HmmlrSupport outcome based on HMMLR support averages
	if = {
		limit = {
			check_variable = { north_HmmlrSupport > 69.99 } 
		}
		#load HMMLR Winner OOB
		FEN = {
			load_oob = "ECW_North_Winner_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_North_Loser_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	else_if = {
		limit = {
			check_variable = { north_HmmlrSupport < 30.01 } 
		}
		#load Collab Winner OOB
		FEN = {
			set_province_controller = 322
			load_oob = "ECW_North_Loser_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			set_state_controller = 130
			set_state_controller = 129
			load_oob = "ECW_North_Winner_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
	}
	else = {
		#neutral OOB
		FEN = {
			load_oob = "ECW_North_Neutral_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			set_province_controller = 9322
			set_province_controller = 9250
			set_province_controller = 3353
			load_oob = "ECW_North_Neutral_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBNorth; Completed execution"
}

ENG_SE_EnglishCivlWarOOBWest = {	
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBWest; Executing"
	# Determine if 100% HmmlrSupport outcome based on HMMLR support averages
	if = {
		limit = {
			check_variable = { west_HmmlrSupport > 69.99 } 
		}
		#load HMMLR Winner OOB
		FEN = {
			load_oob = "ECW_West_Winner_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
		ENG = {
			set_state_controller = 132
			load_oob = "ECW_West_Loser"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	else_if = {
		limit = {
			check_variable = { west_HmmlrSupport < 30.01 } 
		}
		#load Collab Winner OOB
		FEN = {
			load_oob = "ECW_West_Loser_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			set_state_controller = 128
			set_state_controller = 885
			load_oob = "ECW_West_Winner"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
	}
	else = {
		#neutral OOB
		FEN = {
			set_province_controller = 11345
			set_province_controller = 6270
			load_oob = "ECW_West_Neutral_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			set_state_controller = 885
			load_oob = "ECW_West_Neutral_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBWest; Completed execution"
}

ENG_SE_EnglishCivlWarOOBSouth = {	
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBSouth; Executing"
	# Determine if 100% HmmlrSupport outcome based on HMMLR support averages
	if = {
		limit = {
			check_variable = { south_HmmlrSupport > 69.99 } 
		}
		#load HMMLR Winner OOB
		FEN = {
			set_state_controller = 127
			set_state_controller = 777
			load_oob = "ECW_South_Winner"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_South_Loser"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	else_if = {
		limit = {
			check_variable = { south_HmmlrSupport < 30.01 } 
		}
		#load Collab Winner OOB
		FEN = {
			load_oob = "ECW_South_Loser"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_South_Winner" 
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
	}
	else = {
		#neutral OOB
		FEN = {
			set_state_controller = 338
			set_state_controller = 777
			load_oob = "ECW_South_Neutral_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_South_Neutral_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBSouth; Completed execution"
}

ENG_SE_EnglishCivlWarOOBLondon = {	
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBLondon; Executing"
	# Determine if 100% HmmlrSupport outcome based on HMMLR support averages
	if = {
		limit = {
			check_variable = { london_HmmlrSupport > 69.99 } 
		}
		#load HMMLR Winner OOB
		FEN = {
			set_state_controller = 125
			load_oob = "ECW_London_Winner_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_London_Loser_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	else_if = {
		limit = {
			check_variable = { london_HmmlrSupport < 30.01 } 
		}
		#load Collab Winner OOB
		FEN = {
			set_province_controller = 3287
			set_province_controller = 296
			set_province_controller = 322
			load_oob = "ECW_London_Loser_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_London_Winner_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 355 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 7 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 12 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 23 producer = ENG }
			add_equipment_to_stockpile = { type = motorized_equipment amount = 22 producer = ENG }
			add_equipment_to_stockpile = { type = IFV_equipment amount = 4 producer = ENG }
		}
	}
	else = {
		#neutral OOB
		FEN = {
			set_state_controller = 125
			load_oob = "ECW_London_Neutral_HMMLR"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
		ENG = {
			load_oob = "ECW_London_Neutral_Collab"
			add_equipment_to_stockpile = { type = infantry_equipment amount = 270 producer = ENG }
			add_equipment_to_stockpile = { type = artillery_equipment amount = 6 producer = ENG }
			add_equipment_to_stockpile = { type = support_equipment amount = 8 producer = ENG }
			add_equipment_to_stockpile = { type = anti_tank_equipment amount = 16 producer = ENG }
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBLondon; Completed execution"
}

ENG_SE_EnglishCivlWarOOBFENTank = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBFENTank; Executing"
	if = {
		limit = {
			is_ai = no
			has_country_flag = ENG_HMMLR_Tank_1
		}
		clr_country_flag = ENG_HMMLR_Tank_1
		FEN = { load_oob = "FEN_ECW_Tank_1" }
	}
	else_if = {
		limit = {
			is_ai = yes
			has_country_flag = ENG_HMMLR_Tank_1
		}
		clr_country_flag = ENG_HMMLR_Tank_1
		FEN = {
			add_equipment_to_stockpile = { type = infantry_equipment_2 amount = 205 producer = USA }
			add_equipment_to_stockpile = { type = APC_equipment_2 amount = 100 producer = USA }
			add_equipment_to_stockpile = { type = MBT_equipment_2 amount = 90 producer = USA }
			add_equipment_to_stockpile = { type = artillery_equipment_3 amount = 12 producer = USA }
			add_equipment_to_stockpile = { type = support_equipment amount = 28 producer = USA }
			add_manpower = 8400
		}
	}
	else_if = {
		limit = {
			has_country_flag = ENG_HMMLR_Tank_2
		}
		clr_country_flag = ENG_HMMLR_Tank_2
		FEN = { load_oob = "FEN_ECW_Tank_2" }
	}
	else_if = {
		limit = {
			has_country_flag = ENG_HMMLR_Tank_3
		}
		clr_country_flag = ENG_HMMLR_Tank_3
		FEN = {
			load_oob = "FEN_ECW_Tank_3"
			add_equipment_to_stockpile = { type = infantry_equipment_2 amount = 82 producer = USA }
			add_equipment_to_stockpile = { type = APC_equipment_2 amount = 40 producer = USA }
			add_equipment_to_stockpile = { type = MBT_equipment_2 amount = 36 producer = USA }
			add_equipment_to_stockpile = { type = artillery_equipment_3 amount = 5 producer = USA }
			add_equipment_to_stockpile = { type = support_equipment amount = 11 producer = USA }
		}
	}
	else_if = {
		limit = {
			has_country_flag = Hmmlr_special_shipments_approved
		}
		FEN = {
			add_equipment_to_stockpile = { type = infantry_equipment_2 amount = 82 producer = USA }
			add_equipment_to_stockpile = { type = APC_equipment_2 amount = 40 producer = USA }
			add_equipment_to_stockpile = { type = MBT_equipment_2 amount = 36 producer = USA }
			add_equipment_to_stockpile = { type = artillery_equipment_3 amount = 5 producer = USA }
			add_equipment_to_stockpile = { type = support_equipment amount = 11 producer = USA }
		}
	}
	clr_country_flag = Hmmlr_special_shipment_1
	clr_country_flag = Hmmlr_special_shipment_2
	clr_country_flag = Hmmlr_special_shipment_3
	clr_country_flag = Hmmlr_special_shipments_approved
	log = "[GetDateText]: [Root.GetName]: ENG_SE_EnglishCivlWarOOBFENTank; Completed execution"
}


####### ECW Completion Effects #######

ENG_SE_HMMLR_ECW_VictoryPostAnnex = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_HMMLR_ECW_VictoryPostAnnex; Executing"
	#This SE contains effects that must be done after FEN is annexed into ENG
	#Remove FEN cores
	every_state = {
		limit = {
			is_core_of = FEN
		}
		remove_core_of = FEN
	}
	#Remove CRN cores
	every_state = {
		limit = {
			is_core_of = CRN
		}
		remove_core_of = CRN
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_HMMLR_ECW_VictoryPostAnnex; Completed execution"
}

ENG_SE_HMMLR_ECW_VictoryPreAnnex = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_HMMLR_ECW_VictoryPreAnnex; Executing"
	#This SE contains effects that are to be done before FEN is annexed into ENG
	hidden_effect = {
		#Switch player tag
		ENG = { change_tag_from = FEN }
		
		#Shift FEN politics to ENG
		ENG = {
			set_party_name = {
				ideology = authoritarian_democrat
				long_name = ENG_HMMLR_Reconstruction_Conservative_long
				name = ENG_HMMLR_Reconstruction_Conservative
			}
			set_party_name = {
				ideology = social_conservative
				long_name = ENG_HMMLR_Reconstruction_Moderate_long
				name = ENG_HMMLR_Reconstruction_Moderate
			}
			set_party_name = {
				ideology = social_liberal
				long_name = ENG_HMMLR_Reconstruction_Liberal_long
				name = ENG_HMMLR_Reconstruction_Liberal
			}
			set_party_name = {
				ideology = social_democrat
				long_name = ENG_HMMLR_Reconstruction_Social_Long
				name = ENG_HMMLR_Reconstruction_Social
			}
			set_party_name = {
				ideology = socialist
				long_name = ENG_HMMLR_Reconstruction_Reformist_long
				name = ENG_HMMLR_Reconstruction_Reformist
			}
			set_party_name = {
				ideology = communist
				long_name = ENG_HMMLR_Reconstruction_Hardliner_long
				name = ENG_HMMLR_Reconstruction_Hardliner
			}
			set_party_name = {
				ideology = despotism
				long_name = ENG_HMMLR_Reconstruction_Movement_long
				name = ENG_HMMLR_Reconstruction_Movement
			}
			retire_ideology_leader = social_conservative		#Macmillan
			retire_ideology_leader = fascism		#Chesterton
			set_politics = { ruling_party = authoritarian_democrat }
			retire_country_leader = yes
			#Port over all FEN leaders
			create_country_leader = {
				name = "Claude Auchinleck"
				desc = "POLITICS_CLAUDE_AUCHINLECK_DESC"
				picture = "Portrait_England_Claude_Auchinleck.dds"
				expire = "1989.1.1"
				ideology = authoritarian_democrat_subtype
				traits = {
	
				}
			}			
			create_country_leader = {
				name = "David Stirling"
				desc = "POLITICS_David_Stirling_DESC"
				picture = "Portrait_England_David_Stirling.dds"
				expire = "1985.1.1"
				ideology = despotism_subtype
				traits = {
					
				}
			}
			create_country_leader = {
				name = "George Jellicoe"
				desc = "POLITICS_GEORGE_JELLICOE_DESC"
				picture = "Portrait_England_George_Jellicoe.dds"
				expire = "1990.1.1"
				ideology = social_conservative_subtype
				traits = { son_of_admiralty }
			}
			create_country_leader = {
				name = "Reg Birch"
				desc = "POLITICS_REG_BIRCH_DESC"
				picture = "Portrait_England_Reg_Birch.dds"
				expire = "1990.1.1"
				ideology = communist_subtype
				traits = {
				}
			}
			create_country_leader = {
				name = "Norman St John-Stevas"
				desc = ""
				picture = ""
				expire = "1990.1.1"
				ideology = social_liberal_subtype
			}
			create_country_leader = {
				name = "Bill Alexander"
				desc = "POLITICS_WILLIAM_ALEXANDER_DESC"
				picture = "Portrait_England_Bill_Alexander.dds"
				expire = "1985.1.1"
				ideology = socialist_subtype
				traits = {
				}
			}
			set_popularities = {
				authoritarian_democrat = 25
				social_conservative = 15
				social_liberal = 15
				social_democrat = 5
				socialist = 30
				communist = 10
			}
			#Remove ENG-exclusive ideas 
			remove_ideas = {
				tno_trade_unions_illegal
				tno_military_spending_low_spending
				tno_racial_integration_none
				tno_minorities_oppression
			}
			remove_all_ministers = yes
			add_ideas = {
				### MINISTERS ###
				FEN_Claude_Auchinleck_hog
				FEN_David_Stirling_sec
				FEN_Bill_Alexander_for
				FEN_Reg_Birch_eco
				
				### POLITICAL ###
				tno_trade_unions_state_controlled
				
				### MILITARY ###
				tno_military_spending_medium_spending
				tno_racial_integration_integrated_military
				
				### SOCIAL ###
				tno_minorities_equal_rights
			}
			
			#Move FEN Generals to ENG
			FEN = {
				every_unit_leader = {
					limit = { is_FEN_unit_leader = yes }
					set_nationality = ENG
				} 
			}
			ENG = {
				every_unit_leader = {
					limit = { is_ENG_unit_leader = yes }
					retire = yes
				}
			}

			#Remove ENG divisions
			ENG = {
				division_template = {
					name = "Garrison Division"
					division_names_group = FEN_GarrisonDivision

					regiments = {
						cavalry = { x = 0 y = 0 }
						cavalry = { x = 0 y = 1 }
						cavalry = { x = 1 y = 0 }
						cavalry = { x = 1 y = 1 }
					}
					support = {
						military_police = { x = 0 y = 0 }
					}
				}
				delete_unit_template_and_units = {
					division_template = "Royal Military Police"
				}
				delete_unit_template_and_units = {
					division_template = "Militia"
				}
				delete_unit_template_and_units = {
					division_template = "Motorized Division"
				}
				delete_unit_template_and_units = {
					division_template = "Infantry Division"
				}
				inherit_technology = FEN
			}
			
			#Set flags
			set_cosmetic_tag = ENG_HMMLR_Reconstruction
			
		}
		#Remove anti-OFN opinion modifiers
		USA = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		CAN = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		AST = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		GUY = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		NZL = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		ICE = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		BLZ = { remove_opinion_modifier = { target = ENG modifier = embargo } }
		
		#Add anti-Pakt opinion modifiers
		GER = { add_opinion_modifier = { target = ENG modifier = embargo } }
		GGR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		BGR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		GGR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		SGR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		CZE = { add_opinion_modifier = { target = ENG modifier = embargo } }
		GGN = { add_opinion_modifier = { target = ENG modifier = embargo } }
		SLO = { add_opinion_modifier = { target = ENG modifier = embargo } }
		UKR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		MCW = { add_opinion_modifier = { target = ENG modifier = embargo } }
		OST = { add_opinion_modifier = { target = ENG modifier = embargo } }
		COG = { add_opinion_modifier = { target = ENG modifier = embargo } }
		CAU = { add_opinion_modifier = { target = ENG modifier = embargo } }
		SER = { add_opinion_modifier = { target = ENG modifier = embargo } }
		DEN = { add_opinion_modifier = { target = ENG modifier = embargo } }
		HOL = { add_opinion_modifier = { target = ENG modifier = embargo } }
		NOR = { add_opinion_modifier = { target = ENG modifier = embargo } }
		MAD = { add_opinion_modifier = { target = ENG modifier = embargo } }
		MZB = { add_opinion_modifier = { target = ENG modifier = embargo } }
		ANG = { add_opinion_modifier = { target = ENG modifier = embargo } }
		BRG = { add_opinion_modifier = { target = ENG modifier = embargo } }
		BUL = { add_opinion_modifier = { target = ENG modifier = embargo } }
		FRA = { add_opinion_modifier = { target = ENG modifier = embargo } }
		BRT = { add_opinion_modifier = { target = ENG modifier = embargo } }
		IRE = { add_opinion_modifier = { target = ENG modifier = embargo } }
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_HMMLR_ECW_VictoryPreAnnex; Completed execution"
}

####### MacMillan Stuff ######

ENG_SE_MacMillanSetVariables = {
	set_variable = { ENG_Mac_Lovers = 0.70 }
	set_variable = { ENG_Lib_Lovers = 0.30 }
	set_variable = { ENG_democratization_process = 10 }
}

ENG_Thatcher_Add_Maggie_Party_Support_1 = {
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = -0.01
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_Maggie_Party_Gain_1_tt
}

ENG_Thatcher_Add_Maggie_Party_Support_3 = {
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = -0.03
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_Maggie_Party_Gain_3_tt
}

ENG_Thatcher_Add_Maggie_Party_Support_5 = {
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = -0.05
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_Maggie_Party_Gain_5_tt
}

ENG_Thatcher_Add_Maggie_Party_Support_10 = {
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = -0.10
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_Maggie_Party_Gain_10_tt
}

ENG_Thatcher_Add_OG_Party_Support_1 = {
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = 0.01
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_OG_Party_Gain_1_tt
}

ENG_Thatcher_Add_OG_Party_Support_3 = {
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = 0.03
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_OG_Party_Gain_3_tt
}

ENG_Thatcher_Add_OG_Party_Support_5 = {
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = 0.05
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_OG_Party_Gain_5_tt
}

ENG_Thatcher_Add_OG_Party_Support_10 = {
	add_to_variable = {
		var = ENG_OG_Party_Lead
		value = 0.10
	}
	clamp_variable = {
		var = ENG_OG_Party_Lead
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Maggie_Party_Lead
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Maggie_Party_Lead
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	custom_effect_tooltip = ENG_DEC_OG_Party_Gain_10_tt
}

ENG_MacMillan_Add_Liberal_Love_1 = {
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Liberal_Gain_1_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Liberal_Love_3 = {
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Liberal_Gain_3_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Liberal_Love_5 = {
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Liberal_Gain_5_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Liberal_Love_10 = {
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Liberal_Gain_10_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes }
}

ENG_MacMillan_Add_Mac_Love_1 = {
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Mac_Gain_1_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Mac_Love_3 = {
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Mac_Gain_3_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Mac_Love_5 = {
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Mac_Gain_5_tt
	hidden_effect = { 
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Mac_Love_10 = {
	add_to_variable = {
		var = ENG_Mac_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Mac_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Lib_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Lib_Lovers
		min = 0
		max = 1
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Mac_Gain_10_tt
	hidden_effect = {
	UE_INNER_POLITICS_CALC = yes
	}
}

ENG_MacMillan_Add_Democratization_1 = {
	add_to_variable = { ENG_democratization_process = 1 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Add_Democratization_1_tt
}

ENG_MacMillan_Add_Democratization_3 = {
	add_to_variable = { ENG_democratization_process = 3 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Add_Democratization_3_tt
}

ENG_MacMillan_Add_Democratization_5 = {
	add_to_variable = { ENG_democratization_process = 5 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Add_Democratization_5_tt
}

ENG_MacMillan_Add_Democratization_10 = {
	add_to_variable = { ENG_democratization_process = 10 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Add_Democratization_10_tt
}

ENG_MacMillan_Remove_Democratization_1 = {
	subtract_from_variable = { ENG_democratization_process = 1 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Remove_Democratization_1_tt
}

ENG_MacMillan_Remove_Democratization_3 = {
	subtract_from_variable = { ENG_democratization_process = 3 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Remove_Democratization_3_tt
}

ENG_MacMillan_Remove_Democratization_5 = {
	subtract_from_variable = { ENG_democratization_process = 5 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Remove_Democratization_5_tt
}

ENG_MacMillan_Remove_Democratization_10 = {
	subtract_from_variable = { ENG_democratization_process = 10 }
	clamp_variable = {
		var = ENG_democratization_process
		min = 0
		max = 100
	}
	MAC_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_MacMillan_Remove_Democratization_10_tt
}

####### Thatcher Stuff #######

ENG_SE_ThatcherSetVariables = {
	if = {
		limit = {
			ENG = {
				is_ai = yes
			}
		}
		set_variable = { ENG_Maggie_Party_Lead = 0.30 }
		set_variable = { ENG_OG_Party_Lead = 0.70 }
		set_variable = { ENG_Elite_Lovers = 0.60 }
		set_variable = { ENG_Populist_Lovers = 0.60 }
	}
	else = {
		set_variable = { ENG_Maggie_Party_Lead = 0.25 }
		set_variable = { ENG_OG_Party_Lead = 0.75 }
		set_variable = { ENG_Elite_Lovers = 0.40 }
		set_variable = { ENG_Populist_Lovers = 0.40 }
	}
}

ENG_Thatcher_Add_Elite_Love_1 = {
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.00
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Elite_Gain_1_tt
}

ENG_Thatcher_Add_Elite_Love_3 = {
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.025
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Elite_Gain_3_tt
}

ENG_Thatcher_Add_Elite_Love_3_CIA = {
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
		RP_ELITE_SPLIT_CALC = yes
		RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Elite_Gain_3_CIA_tt
}

ENG_Thatcher_Add_Elite_Love_5 = {
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Elite_Gain_5_tt
}

ENG_Thatcher_Add_Elite_Love_10 = {
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = -0.075
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Elite_Gain_10_tt
}

ENG_Thatcher_Add_Pop_Love_1 = {
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = 0.00
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Populists_Gain_1_tt
}

ENG_Thatcher_Add_Pop_Love_3 = {
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.025
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Populists_Gain_3_tt
}

ENG_Thatcher_Add_Pop_Love_3_CIA = {
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
		RP_ELITE_SPLIT_CALC = yes
		RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Populists_Gain_3_CIA_tt
}

ENG_Thatcher_Add_Pop_Love_5 = {
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Populists_Gain_5_tt
}

ENG_Thatcher_Add_Pop_Love_10 = {
	add_to_variable = {
		var = ENG_Populist_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Populist_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Elite_Lovers
		value = -0.075
	}
	clamp_variable = {
		var = ENG_Elite_Lovers
		min = 0
		max = 1
	}
	ENG_something_bad_maggie = yes
	hidden_effect = {
	RP_ELITE_SPLIT_CALC = yes
	RP_POP_SPLIT_CALC = yes
	}
	custom_effect_tooltip = ENG_DEC_Populists_Gain_10_tt
}

ENG_Thatcher_Tick = {
	if = {
		limit = {
			ENG = {
				has_country_leader = { 
					name = "Margaret Thatcher"
					ruling_only = yes
				}
			}
		}
		ENG = {
			set_variable = { Thatcher_Influence_Monthly = 0 }
			if = {
				limit = {
					check_variable = {
						var = ENG_Populist_Lovers
						value = 0.4
						compare = less_than
					}
				}
				subtract_from_variable = { Thatcher_Influence_Monthly = 0.01 }
				if = {
					limit = {
						check_variable = {
							var = ENG_Populist_Lovers
							value = 0.2
							compare = less_than
						}
					}
					subtract_from_variable = { Thatcher_Influence_Monthly = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Populist_Lovers
						value = 0.6
						compare = greater_than
					}
				}
				add_to_variable = { Thatcher_Influence_Monthly = 0.005 }
				if = {
					limit = {
						check_variable = {
							var = ENG_Populist_Lovers
							value = 0.8
							compare = greater_than
						}
					}
					add_to_variable = { Thatcher_Influence_Monthly = 0.005 }
				}
			}
			if = {
				limit = {
					check_variable = {
						var = ENG_Elite_Lovers
						value = 0.4
						compare = less_than
					}
				}
				subtract_from_variable = { Thatcher_Influence_Monthly = 0.01 }
				if = {
					limit = {
						check_variable = {
							var = ENG_Elite_Lovers
							value = 0.2
							compare = less_than
						}
					}
					subtract_from_variable = { Thatcher_Influence_Monthly = 0.01 }
				}
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Elite_Lovers
						value = 0.6
						compare = greater_than
					}
				}
				add_to_variable = { Thatcher_Influence_Monthly = 0.005 }
				if = {
					limit = {
						check_variable = {
							var = ENG_Elite_Lovers
							value = 0.8
							compare = greater_than
						}
					}
					add_to_variable = { Thatcher_Influence_Monthly = 0.005 }
				}
			}
			add_to_variable = { ENG_Maggie_Party_Lead = Thatcher_Influence_Monthly }
			subtract_from_variable = { ENG_OG_Party_Lead = Thatcher_Influence_Monthly }
			
			set_temp_variable = { TEMP_MAGGIE_FOR_GUI = ENG_Maggie_Party_Lead }
			multiply_temp_variable = { TEMP_MAGGIE_FOR_GUI = 100 }
			set_variable = { MAGGIE_FOR_GUI = TEMP_MAGGIE_FOR_GUI }
			
			set_temp_variable = { TEMP_Thatcher_Influence_Monthly_FOR_GUI = Thatcher_Influence_Monthly }
			multiply_temp_variable = { TEMP_Thatcher_Influence_Monthly_FOR_GUI = 100 }
			set_variable = { Thatcher_Influence_Monthly_FOR_GUI = TEMP_Thatcher_Influence_Monthly_FOR_GUI }
		}	
	}
}


ENG_something_bad_maggie = {
	set_temp_variable = { TEMP_MAGGIE_FOR_GUI = ENG_Maggie_Party_Lead }
	multiply_temp_variable = { TEMP_MAGGIE_FOR_GUI = 100 }
	set_variable = { MAGGIE_FOR_GUI = TEMP_MAGGIE_FOR_GUI }
}

SLP_GUI_REFRESH = {
	set_temp_variable = { TEMP_REFORM_BAR = ENG_SLPReformation_process }
	multiply_temp_variable = { TEMP_REFORM_BAR = 100 }
	set_variable = { ENG_REFORM_SLP = TEMP_REFORM_BAR }
	set_temp_variable = { TEMP_SLP_LOVER = ENG_Reformers_SLP_Lovers }
	multiply_temp_variable = { TEMP_SLP_LOVER = 100 }
	set_variable = { ENG_SLP_GOOD_GUYS = TEMP_SLP_LOVER }
}
MAC_GUI_REFRESH = {
	set_temp_variable = { TEMP_MAC_LOVER_BAR = ENG_Mac_Lovers }
	multiply_temp_variable = { TEMP_MAC_LOVER_BAR = 100 }
	set_variable = { ENG_MAC_LOVER_BAR = TEMP_MAC_LOVER_BAR }
	set_temp_variable = { TEMP_DEMO_BAR = ENG_Mac_Lovers }
	multiply_temp_variable = { TEMP_DEMO_BAR = 100 }
	set_variable = { ENG_MAC_DEMO_BAR = ENG_democratization_process }
}

ENG_Democratization_Tick = {
	if = {
		limit = {
			ENG = {
				has_country_flag = ENG_not_in_game_yet
			}
		}
		ENG = {
			if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.05
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.10
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_10_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.05
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.10
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.09
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_9_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.10
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.15
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.08
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_8_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.15
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.20
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.07
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_7_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.20
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.25
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.06
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_6_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.25
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.30
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.05
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_5_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.30
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.35
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.04
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_4_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.35
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.40
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.03
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_3_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.40
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.45
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.02
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_2_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.45
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.50
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = 0.01
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_gain_1_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.50
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.55
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.01
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_1_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.55
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.60
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.02
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_2_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.60
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.65
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.03
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_3_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.65
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.70
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.04
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_4_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.70
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.75
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.05
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_5_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.75
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.80
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.06
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_6_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.80
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.85
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.07
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_7_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.85
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.90
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.08
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_8_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.90
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Mac_Lovers
							value = 0.95
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.09
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_9_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Mac_Lovers
						value = 0.95
						compare = greater_than_or_equals
					}
				}
				add_to_variable = {
					var = ENG_democratization_process
					value = -0.10
				}
				clamp_variable = {
					var = ENG_democratization_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_Democratization_lose_10_tt
			}
		}
	}
	MAC_GUI_REFRESH = yes
}

## NDL MECHANIC

ENG_NDL_MEC_Begin_Liberal_Tick = {
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	if = {
		limit = {
			check_variable = {
				var = ENG_NDL_Mec_Liberal_Strength
				value = 0.41
				compare = greater_than_or_equals
			}
		}
		ENG = {
			country_event = {
				id = FEN_NDL_Mechanic.1
				days = 1
			}
		}
	}
	#hidden_effect = {
	#	activate_mission = ENG_DEC_test_liberal_growth
	#}
	if = {
		limit = {
			NOT = {
				has_country_flag = ENG_NDL_Liberal_Growth
			}
		}
		set_country_flag = ENG_NDL_Liberal_Growth
		custom_effect_tooltip = ENG_TT_NDL_MEC_Liberal_Tick_Begin
	}
	else_if = {
		limit = {
			has_country_flag = ENG_NDL_Liberal_Growth
		}
		custom_effect_tooltip = ENG_TT_NDL_MEC_Liberal_Tick_Continue
	}
}

ENG_NDL_MEC_Begin_Moderate_Tick = {
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	if = {
		limit = {
			check_variable = {
				var = ENG_NDL_Mec_Moderate_Strength
				value = 0.41
				compare = greater_than_or_equals
			}
		}
		ENG = {
			country_event = {
				id = FEN_NDL_Mechanic.2
				days = 1
			}
		}
	}
	#hidden_effect = {
	#	activate_mission = ENG_DEC_test_moderate_growth
	#}
	if = {
		limit = {
			NOT = {
				has_country_flag = ENG_NDL_Moderate_Growth
			}
		}
		set_country_flag = ENG_NDL_Moderate_Growth
		custom_effect_tooltip = ENG_TT_NDL_MEC_Moderate_Tick_Begin
	}
	else_if = {
		limit = {
			has_country_flag = ENG_NDL_Moderate_Growth
		}
		custom_effect_tooltip = ENG_TT_NDL_MEC_Moderate_Tick_Continue
	}
}

ENG_NDL_MEC_Begin_Conservative_Tick = {
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	if = {
		limit = {
			check_variable = {
				var = ENG_NDL_Mec_Conserv_Strength
				value = 0.41
				compare = greater_than_or_equals
			}
		}
		ENG = {
			country_event = {
				id = FEN_NDL_Mechanic.3
				days = 1
			}
		}
	}
	#hidden_effect = {
	#	activate_mission = ENG_DEC_test_conservative_growth
	#}
	if = {
		limit = {
			NOT = {
				has_country_flag = ENG_NDL_Conservative_Growth
			}
		}
		set_country_flag = ENG_NDL_Conservative_Growth
		custom_effect_tooltip = ENG_TT_NDL_MEC_Conservative_Tick_Begin
	}
	else_if = {
		limit = {
			has_country_flag = ENG_NDL_Conservative_Growth
		}
		custom_effect_tooltip = ENG_TT_NDL_MEC_Conservative_Tick_Continue
	}
}

ENG_NDL_MEC_End_Liberal_Tick = {
	clr_country_flag = ENG_NDL_Liberal_Growth
	custom_effect_tooltip = ENG_TT_NDL_MEC_Liberal_Tick_End
}
ENG_NDL_MEC_End_Moderate_Tick = {
	clr_country_flag = ENG_NDL_Moderate_Growth
	custom_effect_tooltip = ENG_TT_NDL_MEC_Moderate_Tick_End
}
ENG_NDL_MEC_End_Conservative_Tick = {
	clr_country_flag = ENG_NDL_Conservative_Growth
	custom_effect_tooltip = ENG_TT_NDL_MEC_Conservative_Tick_End
}

ENG_NDL_MEC_Liberals_gain_power = {
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_liberals_gain_strength
}

ENG_NDL_MEC_Moderates_gain_power = {
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_moderates_gain_strength
}

ENG_NDL_MEC_Conservatives_gain_power = {
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = 0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.01 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = -0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_conservatives_gain_strength
}

ENG_NDL_MEC_Liberals_lose_power = {
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.02 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = 0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = 0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_liberals_lose_strength
}

ENG_NDL_MEC_Moderates_lose_power = {
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = -0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = 0.01 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = 0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_moderates_lose_strength
}

ENG_NDL_MEC_Conservatives_lose_power = {
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.02 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = 0.01 } 
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = 0.01 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_conservatives_lose_strength
}

ENG_NDL_MEC_Moderates_gain_big_power = {
	add_to_variable = { ENG_NDL_Mec_Moderate_Strength = 0.04 } 
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.02 } 
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.02 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_moderates_gain_strength
}

ENG_NDL_MEC_Liberals_beat_Conservatives = {
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = 0.03 }
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = -0.03 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_liberals_gain_strength
}

ENG_NDL_MEC_Conservatives_beat_Liberals = {
	add_to_variable = { ENG_NDL_Mec_Liberal_Strength = -0.03 }
	add_to_variable = { ENG_NDL_Mec_Conserv_Strength = 0.03 } 
	ENG_NDL_MEC_Clamp_Power = yes
	custom_effect_tooltip = FEN_NDL_conservatives_gain_strength
}

ENG_NDL_MEC_Clamp_Power = {
	clamp_variable = {
		var = ENG_NDL_Mec_Moderate_Strength
		min = 0
		max = 1
	}
	clamp_variable = {
		var = ENG_NDL_Mec_Liberal_Strength
		min = 0
		max = 1
	}
	clamp_variable = {
		var = ENG_NDL_Mec_Conserv_Strength
		min = 0
		max = 1
	}
	set_temp_variable = { ENG_NDL_total_power = ENG_NDL_Mec_Moderate_Strength }
	add_to_temp_variable = { ENG_NDL_total_power = ENG_NDL_Mec_Liberal_Strength }
	add_to_temp_variable = { ENG_NDL_total_power = ENG_NDL_Mec_Conserv_Strength }
	
	divide_variable = { ENG_NDL_Mec_Moderate_Strength = ENG_NDL_total_power }
	divide_variable = { ENG_NDL_Mec_Liberal_Strength = ENG_NDL_total_power }
	divide_variable = { ENG_NDL_Mec_Conserv_Strength = ENG_NDL_total_power }
}

####### SLP Stuff ######

ENG_SLP_Add_Reformer_Love_1 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Reformist_Gain_1_tt
}

ENG_SLP_Add_Reformer_Love_3 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Reformist_Gain_3_tt
}

ENG_SLP_Add_Reformer_Love_5 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Reformist_Gain_5_tt
}

ENG_SLP_Add_Reformer_Love_10 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Reformist_Gain_10_tt
}

ENG_SLP_Add_Hardliner_Love_1 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Hardliner_Gain_1_tt
}

ENG_SLP_Add_Hardliner_Love_3 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Hardliner_Gain_3_tt
}

ENG_SLP_Add_Hardliner_Love_5 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Hardliner_Gain_5_tt
}

ENG_SLP_Add_Hardliner_Love_10 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	SLP_GUI_REFRESH = yes
	custom_effect_tooltip = ENG_DEC_Hardliner_Gain_10_tt
}

ENG_SLP_Tick = {
	if = {
		limit = {
			ENG = {
				has_country_flag = SLP_HUMOR
			}
		}
		ENG = {
			if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.05
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.10
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_10_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.05
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.10
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.09
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_9_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.10
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.15
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.08
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_8_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.15
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.20
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.07
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_7_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.20
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.25
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.06
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_6_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.25
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.30
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.05
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_5_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.30
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.35
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.04
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_4_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.35
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.40
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.03
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_3_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.40
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.45
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.02
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_2_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.45
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.50
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = 0.01
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_gain_1_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.50
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.55
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.01
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_1_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.55
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.60
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.02
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_2_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.60
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.65
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.03
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_3_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.65
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.70
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.04
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_4_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.70
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.75
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.05
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_5_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.75
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.80
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.06
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_6_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.80
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.85
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.07
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_7_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.85
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.90
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.08
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_8_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.90
						compare = greater_than_or_equals
					}
					NOT = {
						check_variable = {
							var = ENG_Hardliner_SLP_Lovers
							value = 0.95
							compare = greater_than_or_equals
						}
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.09
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_9_tt
			}
			else_if = {
				limit = {
					check_variable = {
						var = ENG_Hardliner_SLP_Lovers
						value = 0.95
						compare = greater_than_or_equals
					}
				}
				add_to_variable = {
					var = ENG_SLPReformation_process
					value = -0.10
				}
				clamp_variable = {
					var = ENG_SLPReformation_process
					min = 0
					max = 1
				}
				custom_effect_tooltip = ENG_SLP_lose_10_tt
			}
		}
	}
	SLP_GUI_REFRESH = yes
}

ENG_SLP_Remove_Reformer_Love_1 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reformist_Lose_1_tt
}

ENG_SLP_Remove_Reformer_Love_3 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reformist_Lose_3_tt
}

ENG_SLP_Remove_Reformer_Love_5 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reformist_Lose_5_tt
}

ENG_SLP_Remove_Reformer_Love_10 = {
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reformist_Lose_10_tt
}

ENG_SLP_Remove_Hardliner_Love_1 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.01
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.01
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Hardliner_Lose_1_tt
}

ENG_SLP_Remove_Hardliner_Love_3 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.03
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.03
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Hardliner_Lose_3_tt
}

ENG_SLP_Remove_Hardliner_Love_5 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.05
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.05
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Hardliner_Lose_5_tt
}

ENG_SLP_Remove_Hardliner_Love_10 = {
	add_to_variable = {
		var = ENG_Hardliner_SLP_Lovers
		value = -0.10
	}
	clamp_variable = {
		var = ENG_Hardliner_SLP_Lovers
		min = 0
		max = 1
	}
	add_to_variable = {
		var = ENG_Reformers_SLP_Lovers
		value = 0.10
	}
	clamp_variable = {
		var = ENG_Reformers_SLP_Lovers
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Hardliner_Lose_10_tt
}


ENG_SLP_Add_Reform_Progress_1 = {
	add_to_variable = {
		var = ENG_SLPReformation_process
		value = 0.01
	}
	clamp_variable = {
		var = ENG_SLPReformation_process
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reform_Progress_1_tt
}

ENG_SLP_Add_Reform_Progress_3 = {
	add_to_variable = {
		var = ENG_SLPReformation_process
		value = 0.03
	}
	clamp_variable = {
		var = ENG_SLPReformation_process
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reform_Progress_3_tt
}

ENG_SLP_Add_Reform_Progress_5 = {
	add_to_variable = {
		var = ENG_SLPReformation_process
		value = 0.05
	}
	clamp_variable = {
		var = ENG_SLPReformation_process
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reform_Progress_5_tt
}

ENG_SLP_Add_Reform_Progress_10 = {
	add_to_variable = {
		var = ENG_SLPReformation_process
		value = 0.10
	}
	clamp_variable = {
		var = ENG_SLPReformation_process
		min = 0
		max = 1
	}
	custom_effect_tooltip = ENG_DEC_Reform_Progress_10_tt
}

########
#MILMAN#
########

ENG_MILMAN_INIT = {
	set_country_flag = ENG_MILMAN_INIT
	if = {limit = { is_ai = yes } 
	set_variable = { ENG_MIL_LOY = 65	}	
	set_variable = { ENG_MIL_EFF = 45	}
	set_variable = { ENG_MIL_LOY_FLR = 60	}
	set_variable = { ENG_MIL_EFF_FLR = 45	}
	}
	else_if = {
	set_variable = { ENG_MIL_LOY = 45	}	
	set_variable = { ENG_MIL_EFF = 25	}
	set_variable = { ENG_MIL_LOY_FLR = 40	}
	set_variable = { ENG_MIL_EFF_FLR = 25	}
	}
	set_variable = {
		var = mission_govtstab
		value = 75
	}
	set_variable = {
		var = mission_army_prof
		value = 75
	}
	ENG_MILMAN_CALC = yes
	add_dynamic_modifier = { modifier = ENG_MILMAN_FX }
	ENG_MILMAN_GOVTSTAB_INITIALIZER = yes
	set_variable = { ENG_MIL_EFF_NXT_MTH = 25 }
}

ENG_MILMAN_CALC = { 
##fully working now	
	clamp_variable = {
		var = ENG_MIL_LOY 
		min = 0
		max = 100
	}
	clamp_variable = {
		var = ENG_MIL_LOY_FLR 
		min = 0
		max = 100
	}
	clamp_variable = {
		var = ENG_MIL_EFF
		min = 0
		max = 100
	}
	clamp_variable = {
		var = ENG_MIL_EFF_FLR
		min = 0
		max = 100
	}
	set_variable = { ENG_MIL_LOY_CALC1 = ENG_MIL_LOY }
	#set_variable = { ENG_MIL_LOY_STAB_CALC1 = ENG_MIL_LOY }
	set_variable = { ENG_MIL_EFF_CALC1 = ENG_MIL_EFF }
	
	subtract_from_variable = { ENG_MIL_LOY_CALC1 = 75 } ##var ranges from -75 to 25
	subtract_from_variable = { ENG_MIL_EFF_CALC1 = 75 }
	#subtract_from_variable = { ENG_MIL_LOY_STAB_CALC1 = 75 }

	multiply_variable = { ENG_MIL_LOY_CALC1 = 0.002 }  ##loyalty stab effects range from -0.15 to 0.05
	multiply_variable = { ENG_MIL_EFF_CALC1 = 0.004 } ##division stat effects range from -0.3 to 0.1
	#multiply_variable = { ENG_MIL_LOY_STAB_CALC1 = 0.002 }


	
		##CALCULATING LOYALTY METAMODIFERS ON EFFICIENCY
		
			set_variable = { ENG_MIL_LOYxEFF = ENG_MIL_LOY } ##this new tempvar is used to calculate the effects of loyalty upon efficiency.

			
			if = { ##low efficiency scenario, high loyalty buffers the effects of low efficiency
				limit = {
					check_variable = { ENG_MIL_EFF < 75 }
				}
				multiply_variable = { ENG_MIL_LOYxEFF = -0.005 } ## variable now ranges from -0.5 (highest loyalty) to 0 (lowest loyalty).
				add_to_variable = { ENG_MIL_LOYxEFF = 1.25 } ##variable now ranges from 0.75 (highest loyalty) to 1.25 (lowest loyalty). high loyalty mitigates the effects of poor efficiency, low loyalty exacerbates it.
			}
			else_if = {
				limit = { 
					check_variable = { 
						var = ENG_MIL_EFF 
						value = 75
						compare = greater_than_or_equals
					}
				}
				multiply_variable = { ENG_MIL_LOYxEFF = 0.005 } ## makes this tempvar range from 0 to 0.5
				add_to_variable = { ENG_MIL_LOYxEFF = 0.75 } ## makes this tempvar range from 0.75 to 1.25. high loyalty increases efficiency, low loyalty reduces efficiency
			}
			
			

			multiply_variable = { ENG_MIL_EFF_CALC1 = ENG_MIL_LOYxEFF } ##Apply loyalty fx on efficiency
			
		##CALCULATING EFFICIENCY METAMODIFIERS ON LOYALTY
		
			set_variable = { ENG_MIL_EFFxLOY = ENG_MIL_EFF }
		
			multiply_variable = { ENG_MIL_EFFxLOY = 0.005 } #tempvar ranges from 0 to 0.5
			add_to_variable = { ENG_MIL_EFFxLOY = 0.75 } #tempvar ranges from 0.75 to 1.25
			multiply_variable = { ENG_MIL_LOY_CALC1 = ENG_MIL_EFFxLOY }
			
			
	set_variable = { ENG_MILMAN_FX = ENG_MIL_EFF_CALC1 }		
	set_variable = { ENG_MILMAN_ORG = ENG_MIL_LOY_CALC1 }
	#set_variable = { ENG_MILMAN_STAB = ENG_MIL_LOY_STAB_CALC1 }
	#clamp_variable = {
	#	var = ENG_MILMAN_STAB
	#	min = -0.17
	#	max = 0.08
	#}


	set_variable = { ENG_MILMAN_STAB_SHOW = ENG_MIL_LOY }
	subtract_from_variable = { ENG_MILMAN_STAB_SHOW = 75 }
	multiply_variable = { ENG_MILMAN_STAB_SHOW = 0.002 }
	if = {
		limit = { has_country_flag = MILMAN_GOVSTAB_INITIALIZED } 
		ENG_MILMAN_GOVTSTAB_CALC = yes
	}
	clear_variable = ENG_MIL_LOY_CALC1
	clear_variable = ENG_MIL_EFF_CALC1
	clear_variable = ENG_MIL_LOYxEFF
	clear_variable = ENG_MIL_EFFxLOY
	ENG_MILMAN_DECAY_CALC = yes
}

ENG_MILMAN_DECAY_CALC = {
	 
	set_variable = { ENG_MIL_LOY_DECAY = ENG_MIL_LOY }
	subtract_from_variable = { ENG_MIL_LOY_DECAY = ENG_MIL_LOY_FLR }
	if = {
		limit = {
			OR = {
				check_variable = { 
					var = ENG_MIL_LOY_DECAY 
					value = 0.101   ##doesn't work if i set it to 0.1 and i have no idea why
					compare = greater_than_or_equals
				}
				check_variable = { 
					var = ENG_MIL_LOY_DECAY 
					value = -0.101
					compare = less_than_or_equals
				}
			}
		}
		multiply_variable = { ENG_MIL_LOY_DECAY = 0.319} ###calculates how much to subtract / add every month to loyalty. variable decays 90% to floor every 6 months with this constant.
		set_variable = { ENG_MIL_LOY_NXT_MTH = ENG_MIL_LOY }
		subtract_from_variable = { ENG_MIL_LOY_NXT_MTH = ENG_MIL_LOY_DECAY } ##precalculate values for the next month after decay. useful to show player.	
		
		##rounding to 1 decimal place
		multiply_variable = { ENG_MIL_LOY_NXT_MTH = 10 }
		round_variable = ENG_MIL_LOY_NXT_MTH
		multiply_variable = { ENG_MIL_LOY_NXT_MTH = 0.1 }
	}	
	else_if = {  ##this block is used to ensure that the values don't get stuck extremely close to the floor. also saves a teensy amount of computational power
		limit = {
			OR = {
				AND = {
					check_variable = { ENG_MIL_LOY_DECAY < 0.101 }
					check_variable = { ENG_MIL_LOY_DECAY > 0 }
				}
				AND = {
					check_variable = { ENG_MIL_LOY_DECAY > -0.101 }
					check_variable = { ENG_MIL_LOY_DECAY < 0 }
				}
			}
		}
		set_variable = { ENG_MIL_LOY_NXT_MTH = ENG_MIL_LOY_FLR }
	}
		
	
	set_variable = { ENG_MIL_EFF_DECAY = ENG_MIL_EFF }
	subtract_from_variable = { ENG_MIL_EFF_DECAY = ENG_MIL_EFF_FLR }
	
	if = { 
		limit = {
			OR = {
				check_variable = {
					var = ENG_MIL_EFF_DECAY 
					value = 0.101
					compare = greater_than_or_equals
				}
				check_variable = {
					var = ENG_MIL_EFF_DECAY 
					value = -0.101
					compare = less_than_or_equals
				}
			}
		}
		multiply_variable = { ENG_MIL_EFF_DECAY = 0.319 } ###calculates how much to subtract / add every month to efficiency
		set_variable = { ENG_MIL_EFF_NXT_MTH = ENG_MIL_EFF }
		subtract_from_variable = { ENG_MIL_EFF_NXT_MTH = ENG_MIL_EFF_DECAY }
		
		multiply_variable = { ENG_MIL_EFF_NXT_MTH = 10 }
		round_variable = ENG_MIL_EFF_NXT_MTH
		multiply_variable = { ENG_MIL_EFF_NXT_MTH = 0.1 }
	}
	else_if = {
		limit = {
			OR = {
				AND = {				
					check_variable = { ENG_MIL_EFF_DECAY < 0.101 }
					check_variable = { ENG_MIL_EFF_DECAY > 0 }
				}
				AND = {
					check_variable = { ENG_MIL_EFF_DECAY > -0.101 }
					check_variable = { ENG_MIL_EFF_DECAY < 0 }
				}
			}
		}
		set_variable = { ENG_MIL_EFF_NXT_MTH = ENG_MIL_EFF_FLR }
	}
}

ENG_MILMAN_DECAY_EXEC = {
	#EXEC AND CALC EFFECTS ARE SEPARATED SO THAT TOOLTIPS CAN SHOW THE PLAYER THE EXPECTED VALUES FOR THE NEXT MONTH. THIS EFFECT SHOULD BE FIRED MONTHLY. 
	if = {
		limit = {
			ENG = {
					has_country_flag = ENG_MILMAN_INIT
			}
		}
		ENG = {
			set_variable = { ENG_MIL_LOY = ENG_MIL_LOY_NXT_MTH }
			set_variable = { ENG_MIL_EFF = ENG_MIL_EFF_NXT_MTH }
			ENG_MILMAN_CALC = yes
		}
	}
}

ENG_MILMAN_GOVTSTAB_INITIALIZER = {
		set_variable = { ENG_MILMAN_STAB_STORAGE = ENG_MIL_LOY }

		add_to_variable = { ParliamentMechanic_GovStab = ENG_MILMAN_STAB_SHOW } 
		clamp_variable = {
			var = ParliamentMechanic_GovStab
			min = 0
			max = 1
	}
	set_country_flag = MILMAN_GOVSTAB_INITIALIZED
}

ENG_MILMAN_GOVTSTAB_CALC = {
	
	set_variable = { ENG_MILMAN_STAB = ENG_MIL_LOY } #ENG_MIL_LOY }

	subtract_from_variable = {
		var = ENG_MILMAN_STAB #60 = 0.12
		value = ENG_MILMAN_STAB_STORAGE #45 = 0.09

	}

	multiply_variable = {ENG_MILMAN_STAB = 0.002}
	add_to_variable = { ParliamentMechanic_GovStab = ENG_MILMAN_STAB } 


	clear_variable = ENG_MILMAN_STAB_STORAGE

	set_variable = { ENG_MILMAN_STAB_STORAGE = ENG_MIL_LOY } #ENG_MIL_LOY }
	
	clamp_variable = {
		var = ParliamentMechanic_GovStab
		min = 0
		max = 1
	}
}

####GOVERNMENT STABILITY SHIZZLE####

ENG_GOVSTAB_MINUS5 = {
	add_to_variable = { ParliamentMechanic_GovStab = -0.05 } 
	clamp_variable = {
		var = ParliamentMechanic_GovStab
		min = 0
		max = 1
}
custom_effect_tooltip = ENG_Government_Stab_reduction5.tt
}
###########################################################################################################################################################################################################################################################################
#QUICK NOTE: RECONSTRUCTION FOR BOTH THE COLLABS AND FREE ENGLAND USES THE SAME VARIABLES! MAKE SURE TO SET EITHER 'ENG_reconstruction_initialized_collab' or 'ENG_reconstruction_initialized_free' IF YOU WANT IT TO WORK CORRECTLY, PM FLIZZY#6123 IF YOU HAVE QUESTIONS#
###########################################################################################################################################################################################################################################################################

ENG_RECONSTRUCTION_initialize = {
	log = "[GetDateText]: [Root.GetName]: ENG_RECONSTRUCTION_initialize"
	every_owned_state = {
		set_variable = { parl_seats = state_population_k }
		divide_variable = { parl_seats = 150 }
		round_variable = parl_seats
	}
	hidden_effect = {
		country_event = {
			id = ENG_reconstruction.1
			days = 7
		}
	}
	885 = {
		set_state_flag = reconstruction_SLP_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	132 = {
		set_state_flag = reconstruction_SLP_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	128 = {
		set_state_flag = reconstruction_SLP_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	129 = {
		set_state_flag = reconstruction_SLP_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	131 = {
		set_state_flag = reconstruction_NDL_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	130 = {
		set_state_flag = reconstruction_NDL_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	125 = {
		set_state_flag = reconstruction_NDL_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	126 = {
		set_state_flag = reconstruction_NDL_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	128 = {
		set_state_flag = reconstruction_NDL_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	127 = {
		set_state_flag = reconstruction_neutral_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	1300 = {
		set_state_flag = reconstruction_neutral_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	777 = {
		set_state_flag = reconstruction_neutral_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	338 = {
		set_state_flag = reconstruction_neutral_state
		set_variable = { reconstruction_SLP_support = 50 }
		set_variable = { reconstruction_NDL_support = 50 }
	}
	set_country_flag = ENG_reconstruction_initialized
}

ENG_reconstruction_tick = {
	ENG = {
		every_owned_state = {
			if = {
				limit = { check_variable = { reconstruction_liberal_drift > 0 } }
				add_to_variable = { reconstruction_SLP_support = reconstruction_liberal_drift }
				subtract_from_variable = { reconstruction_NDL_support = reconstruction_liberal_drift }
			}
			if = {
				limit = { check_variable = { reconstruction_conservative_drift > 0 } }
				add_to_variable = { reconstruction_NDL_support = reconstruction_conservative_drift }
				subtract_from_variable = { reconstruction_SLP_support = reconstruction_conservative_drift }
			}
			if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_SLP_commander
						has_state_flag = reconstruction_NDL_state
					}
				}
				random_list = {
					70 = {
						subtract_from_variable = { reconstruction_SLP_support = 5 }
						add_to_variable = { reconstruction_NDL_support = 5 }
					}
					30 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
				}
			}
			else_if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_SLP_commander
						has_state_flag = reconstruction_SLP_state
					}
				}
				random_list = {
					80 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
					20 = {
						add_to_variable = { reconstruction_NDL_support = 5 }
						subtract_from_variable = { reconstruction_SLP_support = 5 }
					}
				}
			}
			else_if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_NDL_commander
						has_state_flag = reconstruction_SLP_state
					}
				}
				random_list = {
					70 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
					30 = {
						subtract_from_variable = { reconstruction_SLP_support = 5 }
						add_to_variable = { reconstruction_NDL_support = 5 }
					}
				}
			}
			else_if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_NDL_commander
						has_state_flag = reconstruction_NDL_state
					}
				}
				random_list = {
					80 = {
						subtract_from_variable = { reconstruction_SLP_support = 5 }
						add_to_variable = { reconstruction_NDL_support = 5 }
					}
					20 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
				}
			}
			else_if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_NDL_commander
						has_state_flag = reconstruction_neutral_state
					}
				}
				random_list = {
					50 = {
						subtract_from_variable = { reconstruction_SLP_support = 5 }
						add_to_variable = { reconstruction_NDL_support = 5 }
					}
					50 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
				}
			}
			else_if = {
				limit = {
					AND = {
						has_state_flag = reconstruction_SLP_commander
						has_state_flag = reconstruction_neutral_state
					}
				}
				random_list = {
					50 = {
						subtract_from_variable = { reconstruction_SLP_support = 5 }
						add_to_variable = { reconstruction_NDL_support = 5 }
					}
					50 = {
						subtract_from_variable = { reconstruction_NDL_support = 5 }
						add_to_variable = { reconstruction_SLP_support = 5 }
					}
				}
			}
		}
	}
}

ENG_reconstruction_election = {
	set_temp_variable = { slp_seats_nation = 0 }
	set_temp_variable = { ndl_seats_nation = 0 }
	every_owned_state = {
		set_temp_variable = { slp_support = reconstruction_SLP_support }
		divide_temp_variable = { slp_support = 100 }
		set_temp_variable = { ndl_support = reconstruction_SLP_support }
		divide_temp_variable = { ndl_support = 100 }
		set_temp_variable = { slp_seats_local = parl_seats }
		multiply_temp_variable = { slp_seats_local = slp_support }
		set_temp_variable = { ndl_seats_local = parl_seats }
		multiply_temp_variable = { ndl_seats_local = ndl_support }
		set_temp_variable = { total_seats = ndl_seats_local }
		add_to_temp_variable = { total_seats = slp_seats_local }
		if = {
			limit = { NOT = { check_variable = { total_seats = parl_seats } } }
			set_temp_variable = { seat_disparity = parl_seats }
			subtract_from_temp_variable = { seat_disparity = total_seats }
			if = {
				limit = { check_variable = { slp_seats_local > ndl_seats_local} }
				add_to_temp_variable = { slp_seats_local = seat_disparity }
			}
			else_if = {
				limit = { check_variable = { ndl_seats_local > slp_seats_local } }
				add_to_temp_variable = { ndl_seats_local = seat_disparity }
			}
		}
		add_to_temp_variable = { ndl_seats_nation = ndl_seats_local }
		add_to_temp_variable = { slp_seats_nation = slp_seats_local }
	}
	if = {
		limit = { has_country_flag = ENG_reconstruction_initialized_free }
		if = {
			limit = { check_variable = { ndl_seats_nation > slp_seats_nation } }
			##set_country_flag = flag that says the ndl won
		}
		else_if = {
			limit = { check_variable = { slp_seats_nation > ndl_seats_nation } }
			##set_country_flag = flag that says the slp won
		}
		###UH INTEGRATION INTO PARLIAMENT MECHANIC HERE POTENTIALLY
	}
	if = {
		limit = { has_country_flag = ENG_reconstruction_initialized_collab }
		if = {
			limit = { check_variable = { ndl_seats_nation > slp_seats_nation } }
			##set_country_flag = flag that says the ROYAL PARTY won
		}
		else_if = {
			limit = { check_variable = { slp_seats_nation > ndl_seats_nation } }
			##set_country_flag = flag that says the UNITED ENGLAND PARTY won
		}
		###UH INTEGRATION INTO PARLIAMENT MECHANIC HERE POTENTIALLY
	}
}

########################
#### ENGLISH ECONOMY SE ####
########################

ENG_SE_ClampJobValue = {
	clamp_variable = {
		var = domestic_GDP_value
		min = 0
		max = 99
	}
	clamp_variable = {
		var = foreign_GDP_value
		min = 0
		max = 99
	}
}

ENG_SE_ClampJobCount = {
	clamp_variable = {
		var = domestic_jobs
		min = 0
		max = 99999
	}
	clamp_variable = {
		var = foreign_jobs
		min = 0
		max = 99999
	}
}

ENG_SE_CalculateDevTechGDPBonus = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_CalculateDevTechGDPBonus; Executing"
	set_variable = { ROOT.dev_tech_GDP_bonus = ROOT.industrial_expertise_GDP_bonus }
	add_to_variable = { ROOT.dev_tech_GDP_bonus = ROOT.industrial_equipment_GDP_bonus }
	add_to_variable = { ROOT.dev_tech_GDP_bonus = ROOT.education_GDP_bonus }
	add_to_variable = { ROOT.dev_tech_GDP_bonus = ROOT.research_GDP_bonus }
	# Clamp added to handle potential edge cases
	clamp_variable = {
		var = dev_tech_GDP_bonus
		min = 0.1
		max = 2
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_CalculateDevTechGDPBonus; Completed execution."
}

ENG_SE_CalculateUnemployment = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_CalculateUnemployment; Executing"
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Calculate new unemployment 
	set_temp_variable = { unemploymentTemp1 = 1 }
	set_temp_variable = { unemploymentTemp2 = foreign_jobs }
	add_to_temp_variable = { unemploymentTemp2 = domestic_jobs }
	divide_temp_variable = { unemploymentTemp2 = workPop }
	subtract_from_temp_variable = { unemploymentTemp1 = unemploymentTemp2 }
	set_variable = { unemployment = unemploymentTemp1 }
	# Recalculate domestic/foreign business ratio
	set_temp_variable = { total_jobs = domestic_jobs }
	add_to_temp_variable = { total_jobs = foreign_jobs }
	set_variable = { domestic_business_ratio = domestic_jobs }
	divide_variable = { domestic_business_ratio = total_jobs }
	log = "[GetDateText]: [Root.GetName]: ENG_SE_CalculateUnemployment; Completed execution."
}

ENG_SE_CalculateUnemploymentMonthly = {
	log = "[GetDateText]: [PREV.GetName]: ENG_SE_CalculateUnemploymentMonthly; Executing"
	
	# Monthly pulse doesn't like ROOT; this SE is hopefully temporary until a better solution is found
	
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = PREV.working_pop }
	# Calculate new unemployment 
	set_temp_variable = { unemploymentTemp1 = 1 }
	set_temp_variable = { unemploymentTemp2 = foreign_jobs }
	add_to_temp_variable = { unemploymentTemp2 = domestic_jobs }
	divide_temp_variable = { unemploymentTemp2 = workPop }
	subtract_from_temp_variable = { unemploymentTemp1 = unemploymentTemp2 }
	set_variable = { unemployment = unemploymentTemp1 }
	# Recalculate domestic/foreign business ratio
	set_temp_variable = { total_jobs = domestic_jobs }
	add_to_temp_variable = { total_jobs = foreign_jobs }
	set_variable = { domestic_business_ratio = domestic_jobs }
	divide_variable = { domestic_business_ratio = total_jobs }
	log = "[GetDateText]: [PREV.GetName]: ENG_SE_CalculateUnemploymentMonthly; Completed execution."
}

ENG_SE_GDPUpdate = {
	log = "[GetDateText]: [THIS.GetName]: ENG_SE_GDPUpdate; Executing"
	set_variable = { THIS.GDP = 0 } # Each state GDP will be added as updated
	
	every_owned_state = {
		# Update the state GDP
		set_temp_variable = { temp1 = foreign_jobs }
		multiply_temp_variable = { temp1 = foreign_GDP_value }
		set_temp_variable = { temp2 = domestic_jobs }
		multiply_temp_variable = { temp2 = domestic_GDP_value }
		add_to_temp_variable = { temp1 = temp2 }
		set_variable = { state_GDP = temp1 }
		multiply_variable = { state_GDP = PREV.dev_tech_GDP_bonus }
		set_variable = { state_value = state_GDP } #Update TNO's state GDP variable too
		# Add state GDP to overall GDP
		add_to_variable = { PREV.GDP = state_GDP } 
		
		# Get the total working population
		set_variable = { PREV.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { PREV.workPop_temp = PREV.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = domestic_job_growth }
		multiply_temp_variable = { domestic_jobs_new = PREV.workPop_temp }
		# To account for pop growth being stored as a whole number, i.e. 1% = 1.00, 
		# instead of a percentage, i.e. 1% = 0.01 in reality, divide by 100
		divide_temp_variable = { domestic_jobs_new = 100 }
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { PREV.econ_temp_var = domestic_jobs_new }
		add_to_variable = { PREV.econ_temp_var = domestic_jobs }
		add_to_variable = { PREV.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { PREV.econ_temp_var > PREV.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { PREV.econ_temp_var = PREV.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = PREV.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
		ENG_SE_ClampJobCount = yes
		
		# Get new foreign job count and cap it
		set_temp_variable = { foreign_jobs_new = foreign_job_growth }
		multiply_temp_variable = { foreign_jobs_new = PREV.workPop_temp }
		# To account for pop growth being stored as a whole number, i.e. 1% = 1.00, 
		# instead of a percentage, i.e. 1% = 0.01 in reality, divide by 100
		divide_temp_variable = { foreign_jobs_new = 100 }
		# check_variable sadly will not work with temp variables reliably.
		# Hence fixed PREV.workPop_temp and total job count variables
		set_variable = { PREV.econ_temp_var = foreign_jobs_new }
		add_to_variable = { PREV.econ_temp_var = domestic_jobs }
		add_to_variable = { PREV.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { PREV.econ_temp_var > PREV.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { PREV.econ_temp_var = PREV.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = PREV.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
		ENG_SE_ClampJobCount = yes
		
		# Calculate new unemployment 
		ENG_SE_CalculateUnemploymentMonthly = yes
					
		# Get new GDP per capita
		set_variable = { GDP_per_capita = state_GDP }
		divide_variable = { GDP_per_capita = PREV.workPop_temp }
		multiply_variable = { GDP_per_capita = 1000 }	#in millions; multiply as PREV.workPop_temp is in thousands
		round_variable = GDP_per_capita
		
		# Get new domestic business ratio
		set_temp_variable = { temp1 = foreign_jobs }
		add_to_temp_variable = { temp1 = domestic_jobs }
		set_variable = { domestic_business_ratio = domestic_jobs }
		divide_variable = { domestic_business_ratio = temp1 }
	}
	log = "[GetDateText]: [THIS.GetName]: ENG_SE_GDPUpdate; Completed execution."
}

ENG_SE_AddNewStateEcon = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_AddNewStateEcon; Executing"
	#Get the total working population
	set_temp_variable = { workPop = state_population_k } #pop in the thousands	
	set_temp_variable = { working_pop_temp = ROOT.working_pop }
	multiply_temp_variable = { workPop = working_pop_temp }
	
	#Set unemployment at 20-25%
	randomize_temp_variable = {
		var = unemploymentTemp
		min = 20
		max = 25 
	}	
	set_variable = { unemployment = unemploymentTemp }
	divide_variable = { unemployment = 100 }
	
	#Setting up the job distribution such that 5-10% of all jobs are foreign jobs
	randomize_temp_variable = {
		var = job_ratio
		distribution = uniform
		min = 90
		max = 95 
	}	
	set_variable = { domestic_business_ratio = job_ratio }
	divide_variable = { domestic_business_ratio = 100 }
	
	#Get the amount of employed working population 
	set_temp_variable = { employPop = 1 }
	subtract_from_temp_variable = { employPop = unemployment }
	multiply_variable = { employPop = workPop }
	
	#Set the number of domestic and foreign jobs
	set_variable = { domestic_jobs = employPop }
	multiply_variable = { domestic_jobs = domestic_business_ratio }
	multiply_variable = { domestic_jobs = state_population_k }
	multiply_variable = { domestic_jobs = working_pop_temp }
	set_variable = { foreign_jobs = 1 }
	subtract_from_variable = { foreign_jobs = domestic_business_ratio }
	multiply_variable = { foreign_jobs = employPop }
	multiply_variable = { foreign_jobs = state_population_k }
	multiply_variable = { foreign_jobs = working_pop_temp }
	
	#Filler values below
	set_variable = { domestic_job_growth = 0.001 }
	set_variable = { foreign_job_growth = 0.001 }
	
	#Get existing TNO state GDP
	set_variable = { state_GDP = state_value } 
	
	#Assume domestic/foreign GDP value is same initially
	#Thus divide state GDP by employed pop to get value
	set_temp_variable = { total_jobs = domestic_jobs }
	add_to_temp_variable = { total_jobs = foreign_jobs }
	set_variable = { domestic_GDP_value = state_GDP } #in millions per 1000 jobs
	divide_variable = { domestic_GDP_value = total_jobs }
	set_variable = { foreign_GDP_value = domestic_GDP_value } #in millions per 1000 jobs
	
	#Get GDP per capita
	set_variable = { GDP_per_capita = state_GDP }
	divide_variable = { GDP_per_capita = workPop }
	multiply_variable = { GDP_per_capita = 1000 }	#in millions; multiply as workPop is in thousands
	round_variable = GDP_per_capita
	log = "[GetDateText]: [Root.GetName]: ENG_SE_AddNewStateEcon; Completed execution."
}

ENG_SE_AddEveryNewStateEcon = {
	log = "[GetDateText]: [Root.GetName]: ENG_SE_AddEveryNewStateEcon; Executing"
	# Run this SE after a war/annexation to initialize every new state
	every_owned_state = {
		limit = { check_variable = { state_GDP = 0 } }
		# Uninitialized states will not have a state_GDP value, which the game considers equal to 0
		ENG_SE_AddNewStateEcon = yes
	}
	log = "[GetDateText]: [Root.GetName]: ENG_SE_AddEveryNewStateEcon; Completed execution."
}

### Increasing Job Value ###

ENG_SE_IncreaseDomesticJobsValue_Massive = {
	add_to_variable = { domestic_GDP_value = 1 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_Massive_tt
}

ENG_SE_IncreaseDomesticJobsValue_Large = {
	add_to_variable = { domestic_GDP_value = 0.5 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_Large_tt
}

ENG_SE_IncreaseDomesticJobsValue_MediumLarge = {
	add_to_variable = { domestic_GDP_value = 0.25 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_MediumLarge_tt
}

ENG_SE_IncreaseDomesticJobsValue_Medium = {
	add_to_variable = { domestic_GDP_value = 0.125 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_Medium_tt
}

ENG_SE_IncreaseDomesticJobsValue_Small = {
	add_to_variable = { domestic_GDP_value = 0.062 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_Small_tt
}

ENG_SE_IncreaseDomesticJobsValue_Miniscule = {
	add_to_variable = { domestic_GDP_value = 0.005 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsValue_Miniscule_tt
}

ENG_SE_IncreaseForeignJobsValue_Massive = {
	add_to_variable = { foreign_GDP_value = 1 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_Massive_tt
}

ENG_SE_IncreaseForeignJobsValue_Large = {
	add_to_variable = { foreign_GDP_value = 0.5 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_Large_tt
}

ENG_SE_IncreaseForeignJobsValue_MediumLarge = {
	add_to_variable = { foreign_GDP_value = 0.25 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_MediumLarge_tt
}

ENG_SE_IncreaseForeignJobsValue_Medium = {
	add_to_variable = { foreign_GDP_value = 0.125 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_Medium_tt
}

ENG_SE_IncreaseForeignJobsValue_Small = {
	add_to_variable = { foreign_GDP_value = 0.062 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_Small_tt
}

ENG_SE_IncreaseForeignJobsValue_Miniscule = {
	add_to_variable = { foreign_GDP_value = 0.005 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsValue_Miniscule_tt
}

### Decreasing Job Value ###

ENG_SE_DecreaseDomesticJobsValue_Massive = {
	subtract_from_variable = { domestic_GDP_value = 1 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_Massive_tt
}

ENG_SE_DecreaseDomesticJobsValue_Large = {
	subtract_from_variable = { domestic_GDP_value = 0.5 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_Large_tt
}

ENG_SE_DecreaseDomesticJobsValue_MediumLarge = {
	subtract_from_variable = { domestic_GDP_value = 0.25 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_MediumLarge_tt
}

ENG_SE_DecreaseDomesticJobsValue_Medium = {
	subtract_from_variable = { domestic_GDP_value = 0.125 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_Medium_tt
}

ENG_SE_DecreaseDomesticJobsValue_Small = {
	subtract_from_variable = { domestic_GDP_value = 0.062 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_Small_tt
}

ENG_SE_DecreaseDomesticJobsValue_Miniscule = {
	subtract_from_variable = { domestic_GDP_value = 0.005 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobsValue_Miniscule_tt
}

ENG_SE_DecreaseForeignJobsValue_Massive = {
	subtract_from_variable = { foreign_GDP_value = 1 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_Massive_tt
}

ENG_SE_DecreaseForeignJobsValue_Large = {
	subtract_from_variable = { foreign_GDP_value = 0.5 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_Large_tt
}

ENG_SE_DecreaseForeignJobsValue_MediumLarge = {
	subtract_from_variable = { foreign_GDP_value = 0.25 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_MediumLarge_tt
}

ENG_SE_DecreaseForeignJobsValue_Medium = {
	subtract_from_variable = { foreign_GDP_value = 0.125 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_Medium_tt
}

ENG_SE_DecreaseForeignJobsValue_Small = {
	subtract_from_variable = { foreign_GDP_value = 0.062 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_Small_tt
}

ENG_SE_DecreaseForeignJobsValue_Miniscule = {
	subtract_from_variable = { foreign_GDP_value = 0.005 }
	ENG_SE_ClampJobValue = yes
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobsValue_Miniscule_tt
}

### Increasing Job Counts, by value ###

ENG_SE_IncreaseDomesticJobsAmount_1 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 0.001 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_1_tt
}

ENG_SE_IncreaseDomesticJobsAmount_10 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 0.010 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_10_tt
}

ENG_SE_IncreaseDomesticJobsAmount_25 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 0.025 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_25_tt
}

ENG_SE_IncreaseDomesticJobsAmount_50 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 0.050 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_50_tt
}

ENG_SE_IncreaseDomesticJobsAmount_100 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 0.100 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_100_tt
}

ENG_SE_IncreaseDomesticJobsAmount_1000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 1 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_1000_tt
}

ENG_SE_IncreaseDomesticJobsAmount_10000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 10 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_10000_tt
}

ENG_SE_IncreaseDomesticJobsAmount_100000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { domestic_jobs_new = 100 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsAmount_100000_tt
}

ENG_SE_IncreaseForeignJobsAmount_1 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 0.001 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_1_tt
}

ENG_SE_IncreaseForeignJobsAmount_10 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 0.010 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_10_tt
}

ENG_SE_IncreaseForeignJobsAmount_25 = {
	# Get the total working population
	set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
	multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
	# Cap new job count
	set_temp_variable = { foreign_jobs_new = 0.025 }	
	# check_variable sadly will not work with temp variables reliably.
	# Get total job count
	set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
	add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
	add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
	
	# Check to see if the new job count is greater than total working pop
	if = {
		limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
		# Get excess job count
		subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
		# Remove excess from growth
		subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
	}
	add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_25_tt
}

ENG_SE_IncreaseForeignJobsAmount_50 = {
	# Get the total working population
	set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
	multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
	# Cap new job count
	set_temp_variable = { foreign_jobs_new = 0.050 }	
	# check_variable sadly will not work with temp variables reliably.
	# Get total job count
	set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
	add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
	add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
	
	# Check to see if the new job count is greater than total working pop
	if = {
		limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
		# Get excess job count
		subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
		# Remove excess from growth
		subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
	}
	add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_50_tt
}

ENG_SE_IncreaseForeignJobsAmount_100 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 0.100 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_100_tt
}

ENG_SE_IncreaseForeignJobsAmount_1000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 1 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_1000_tt
}

ENG_SE_IncreaseForeignJobsAmount_10000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 10 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_10000_tt
}

ENG_SE_IncreaseForeignJobsAmount_100000 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		# Cap new job count
		set_temp_variable = { foreign_jobs_new = 100 }	
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsAmount_100000_tt
}

### Decreasing Job Counts, by value ###

ENG_SE_ReduceDomesticJobsAmount_1 = {		
	subtract_from_variable = { domestic_jobs = 0.001 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_1_tt
}

ENG_SE_ReduceDomesticJobsAmount_10 = {		
	subtract_from_variable = { domestic_jobs = 0.010 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_10_tt
}

ENG_SE_ReduceDomesticJobsAmount_25 = {		
	subtract_from_variable = { domestic_jobs = 0.025 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_25_tt
}

ENG_SE_ReduceDomesticJobsAmount_50 = {		
	subtract_from_variable = { domestic_jobs = 0.050 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_50_tt
}

ENG_SE_ReduceDomesticJobsAmount_100 = {		
	subtract_from_variable = { domestic_jobs = 0.1 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_100_tt
}

ENG_SE_ReduceDomesticJobsAmount_1000 = {		
	subtract_from_variable = { domestic_jobs = 1 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_1000_tt
}

ENG_SE_ReduceDomesticJobsAmount_10000 = {		
	subtract_from_variable = { domestic_jobs = 10 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_10000_tt
}

ENG_SE_ReduceDomesticJobsAmount_50000 = {		
	subtract_from_variable = { domestic_jobs = 50 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_50000_tt
}

ENG_SE_ReduceDomesticJobsAmount_100000 = {		
	subtract_from_variable = { domestic_jobs = 100 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsAmount_100000_tt
}

ENG_SE_ReduceForeignJobsAmount_1 = {		
	subtract_from_variable = { foreign_jobs = 0.001 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_1_tt
}

ENG_SE_ReduceForeignJobsAmount_10 = {		
	subtract_from_variable = { foreign_jobs = 0.010 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_10_tt
}

ENG_SE_ReduceForeignJobsAmount_25 = {		
	subtract_from_variable = { foreign_jobs = 0.025 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_25_tt
}

ENG_SE_ReduceForeignJobsAmount_50 = {		
	subtract_from_variable = { foreign_jobs = 0.050 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_50_tt
}

ENG_SE_ReduceForeignJobsAmount_100 = {		
	subtract_from_variable = { foreign_jobs = 0.10 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_100_tt
}

ENG_SE_ReduceForeignJobsAmount_1000 = {		
	subtract_from_variable = { foreign_jobs = 1 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_1000_tt
}

ENG_SE_ReduceForeignJobsAmount_10000 = {		
	subtract_from_variable = { foreign_jobs = 10 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_10000_tt
}

ENG_SE_ReduceForeignJobsAmount_100000 = {		
	subtract_from_variable = { foreign_jobs = 100 }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsAmount_100000_tt
}

### Increasing Job Counts, by percentage ###

ENG_SE_IncreaseDomesticJobsPerc_1 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.01 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_1_tt
}

ENG_SE_IncreaseDomesticJobsPerc_2.5 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.025 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_2.5_tt
}

ENG_SE_IncreaseDomesticJobsPerc_5 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.05 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_5_tt
}

ENG_SE_IncreaseDomesticJobsPerc_10 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.1 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_10_tt
}

ENG_SE_IncreaseDomesticJobsPerc_15 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.15 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_15_tt
}

ENG_SE_IncreaseDomesticJobsPerc_20 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.2 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_20_tt
}

ENG_SE_IncreaseDomesticJobsPerc_25 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { domestic_jobs_new = 0.25 }
		multiply_temp_variable = { domestic_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = domestic_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { domestic_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobsPerc_25_tt
}

ENG_SE_IncreaseForeignJobsPerc_1 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.01 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_1_tt
}

ENG_SE_IncreaseForeignJobsPerc_2.5 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.025 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_2.5_tt
}

ENG_SE_IncreaseForeignJobsPerc_5 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.05 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_5_tt
}

ENG_SE_IncreaseForeignJobsPerc_10 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.1 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_10_tt
}

ENG_SE_IncreaseForeignJobsPerc_15 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.15 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_15_tt
}

ENG_SE_IncreaseForeignJobsPerc_20 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.2 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_20_tt
}

ENG_SE_IncreaseForeignJobsPerc_25 = {
		# Get the total working population
		set_variable = { ROOT.workPop_temp = state_population_k } #pop in the thousands
		multiply_variable = { ROOT.workPop_temp = ROOT.working_pop }
		
		# Get new domestic job count and cap it
		set_temp_variable = { foreign_jobs_new = 0.25 }
		multiply_temp_variable = { foreign_jobs_new = ROOT.workPop_temp }		
		# check_variable sadly will not work with temp variables reliably.
		# Get total job count
		set_variable = { ROOT.econ_temp_var = foreign_jobs_new }
		add_to_variable = { ROOT.econ_temp_var = domestic_jobs }
		add_to_variable = { ROOT.econ_temp_var = foreign_jobs }
		
		# Check to see if the new job count is greater than total working pop
		if = {
			limit = { check_variable = { ROOT.econ_temp_var > ROOT.workPop_temp } }
			# Get excess job count
			subtract_from_variable = { ROOT.econ_temp_var = ROOT.workPop_temp } 
			# Remove excess from growth
			subtract_from_temp_variable = { foreign_jobs_new = ROOT.econ_temp_var } 
		}
		add_to_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobsPerc_25_tt
}

### Decreasing Job Counts, by percentage ###

ENG_SE_ReduceDomesticJobsPerc_1 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.01 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_1_tt
}
ENG_SE_ReduceDomesticJobsPerc_2.5 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.025 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_2.5_tt
}

ENG_SE_ReduceDomesticJobsPerc_5 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.05 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_5_tt
}

ENG_SE_ReduceDomesticJobsPerc_10 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.1 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_10_tt
}

ENG_SE_ReduceDomesticJobsPerc_15 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.15 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_15_tt
}

ENG_SE_ReduceDomesticJobsPerc_20 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.2 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_20_tt
}

ENG_SE_ReduceDomesticJobsPerc_25 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new domestic job count and cap it
	set_temp_variable = { domestic_jobs_new = 0.25 }
	multiply_temp_variable = { domestic_jobs_new = workPop }			
	subtract_from_variable = { domestic_jobs = domestic_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceDomesticJobsPerc_25_tt
}

ENG_SE_ReduceForeignJobsPerc_1 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.01 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_1_tt
}

ENG_SE_ReduceForeignJobsPerc_2.5 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.025 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_2.5_tt
}

ENG_SE_ReduceForeignJobsPerc_5 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.05 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_5_tt
}

ENG_SE_ReduceForeignJobsPerc_10 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.1 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_10_tt
}

ENG_SE_ReduceForeignJobsPerc_15 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.15 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_15_tt
}

ENG_SE_ReduceForeignJobsPerc_20 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.2 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_20_tt
}

ENG_SE_ReduceForeignJobsPerc_25 = {
	# Get the total working population
	set_temp_variable = { workPop = state_population_k }
	multiply_temp_variable = { workPop = ROOT.working_pop }
	# Get new foreign job count and cap it
	set_temp_variable = { foreign_jobs_new = 0.25 }
	multiply_temp_variable = { foreign_jobs_new = workPop }			
	subtract_from_variable = { foreign_jobs = foreign_jobs_new }
	ENG_SE_ClampJobCount = yes
	ENG_SE_CalculateUnemployment = yes
	custom_effect_tooltip = ENG_SE_ReduceForeignJobsPerc_25_tt
}

### Increasing Job Growth ###

ENG_SE_IncreaseDomesticJobGrowth_0.001 = {
	add_to_variable = { domestic_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.001_tt
}

ENG_SE_IncreaseDomesticJobGrowth_0.005 = {
	add_to_variable = { domestic_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.005_tt
}

ENG_SE_IncreaseDomesticJobGrowth_0.01 = {
	add_to_variable = { domestic_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.01_tt
}

ENG_SE_IncreaseDomesticJobGrowth_0.05 = {
	add_to_variable = { domestic_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.05_tt
}

ENG_SE_IncreaseDomesticJobGrowth_0.1 = {
	add_to_variable = { domestic_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.1_tt
}

ENG_SE_IncreaseDomesticJobGrowth_0.5 = {
	add_to_variable = { domestic_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_0.5_tt
}

ENG_SE_IncreaseDomesticJobGrowth_1 = {
	add_to_variable = { domestic_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_1_tt
}

ENG_SE_IncreaseDomesticJobGrowth_2.5 = {
	add_to_variable = { domestic_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_2.5_tt
}

ENG_SE_IncreaseDomesticJobGrowth_5 = {
	add_to_variable = { domestic_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_5_tt
}

ENG_SE_IncreaseDomesticJobGrowth_10 = {
	add_to_variable = { domestic_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_10_tt
}

ENG_SE_IncreaseDomesticJobGrowth_15 = {
	add_to_variable = { domestic_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_15_tt
}

ENG_SE_IncreaseDomesticJobGrowth_20 = {
	add_to_variable = { domestic_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_20_tt
}

ENG_SE_IncreaseDomesticJobGrowth_25 = {
	add_to_variable = { domestic_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_IncreaseDomesticJobGrowth_25_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.001 = {
	add_to_variable = { foreign_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.001_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.005 = {
	add_to_variable = { foreign_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.005_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.01 = {
	add_to_variable = { foreign_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.01_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.05 = {
	add_to_variable = { foreign_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.05_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.1 = {
	add_to_variable = { foreign_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.1_tt
}

ENG_SE_IncreaseForeignJobGrowth_0.5 = {
	add_to_variable = { foreign_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_0.5_tt
}

ENG_SE_IncreaseForeignJobGrowth_1 = {
	add_to_variable = { foreign_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_1_tt
}

ENG_SE_IncreaseForeignJobGrowth_2.5 = {
	add_to_variable = { foreign_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_2.5_tt
}

ENG_SE_IncreaseForeignJobGrowth_5 = {
	add_to_variable = { foreign_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_5_tt
}

ENG_SE_IncreaseForeignJobGrowth_10 = {
	add_to_variable = { foreign_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_10_tt
}

ENG_SE_IncreaseForeignJobGrowth_15 = {
	add_to_variable = { foreign_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_15_tt
}

ENG_SE_IncreaseForeignJobGrowth_20 = {
	add_to_variable = { foreign_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_20_tt
}

ENG_SE_IncreaseForeignJobGrowth_25 = {
	add_to_variable = { foreign_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_IncreaseForeignJobGrowth_25_tt
}

### Decreasing Job Growth ###

ENG_SE_DecreaseDomesticJobGrowth_0.001 = {
	subtract_from_variable = { domestic_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.001_tt
}

ENG_SE_DecreaseDomesticJobGrowth_0.005 = {
	subtract_from_variable = { domestic_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.005_tt
}

ENG_SE_DecreaseDomesticJobGrowth_0.01 = {
	subtract_from_variable = { domestic_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.01_tt
}

ENG_SE_DecreaseDomesticJobGrowth_0.05 = {
	subtract_from_variable = { domestic_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.05_tt
}

ENG_SE_DecreaseDomesticJobGrowth_0.1 = {
	subtract_from_variable = { domestic_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.1_tt
}

ENG_SE_DecreaseDomesticJobGrowth_0.5 = {
	subtract_from_variable = { domestic_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_0.5_tt
}

ENG_SE_DecreaseDomesticJobGrowth_1 = {
	subtract_from_variable = { domestic_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_1_tt
}

ENG_SE_DecreaseDomesticJobGrowth_2.5 = {
	subtract_from_variable = { domestic_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_2.5_tt
}

ENG_SE_DecreaseDomesticJobGrowth_5 = {
	subtract_from_variable = { domestic_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_5_tt
}

ENG_SE_DecreaseDomesticJobGrowth_10 = {
	subtract_from_variable = { domestic_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_10_tt
}

ENG_SE_DecreaseDomesticJobGrowth_15 = {
	subtract_from_variable = { domestic_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_15_tt
}

ENG_SE_DecreaseDomesticJobGrowth_20 = {
	subtract_from_variable = { domestic_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_20_tt
}

ENG_SE_DecreaseDomesticJobGrowth_25 = {
	subtract_from_variable = { domestic_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_DecreaseDomesticJobGrowth_25_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.001 = {
	subtract_from_variable = { foreign_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.001_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.005 = {
	subtract_from_variable = { foreign_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.005_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.01 = {
	subtract_from_variable = { foreign_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.01_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.05 = {
	subtract_from_variable = { foreign_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.05_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.1 = {
	subtract_from_variable = { foreign_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.1_tt
}

ENG_SE_DecreaseForeignJobGrowth_0.5 = {
	subtract_from_variable = { foreign_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_0.5_tt
}

ENG_SE_DecreaseForeignJobGrowth_1 = {
	subtract_from_variable = { foreign_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_1_tt
}

ENG_SE_DecreaseForeignJobGrowth_2.5 = {
	subtract_from_variable = { foreign_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_2.5_tt
}

ENG_SE_DecreaseForeignJobGrowth_5 = {
	subtract_from_variable = { foreign_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_5_tt
}

ENG_SE_DecreaseForeignJobGrowth_10 = {
	subtract_from_variable = { foreign_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_10_tt
}

ENG_SE_DecreaseForeignJobGrowth_15 = {
	subtract_from_variable = { foreign_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_15_tt
}

ENG_SE_DecreaseForeignJobGrowth_20 = {
	subtract_from_variable = { foreign_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_20_tt
}

ENG_SE_DecreaseForeignJobGrowth_25 = {
	subtract_from_variable = { foreign_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_DecreaseForeignJobGrowth_25_tt
}

### Set Job Growth ###

ENG_SE_SetDomesticJobGrowth_0.001 = {
	set_variable = { domestic_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.001_tt
}

ENG_SE_SetDomesticJobGrowth_0.005 = {
	set_variable = { domestic_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.005_tt
}

ENG_SE_SetDomesticJobGrowth_0.01 = {
	set_variable = { domestic_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.01_tt
}

ENG_SE_SetDomesticJobGrowth_0.05 = {
	set_variable = { domestic_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.05_tt
}

ENG_SE_SetDomesticJobGrowth_0.1 = {
	set_variable = { domestic_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.1_tt
}

ENG_SE_SetDomesticJobGrowth_0.5 = {
	set_variable = { domestic_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_0.5_tt
}

ENG_SE_SetDomesticJobGrowth_1 = {
	set_variable = { domestic_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_1_tt
}

ENG_SE_SetDomesticJobGrowth_2.5 = {
	set_variable = { domestic_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_2.5_tt
}

ENG_SE_SetDomesticJobGrowth_5 = {
	set_variable = { domestic_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_5_tt
}

ENG_SE_SetDomesticJobGrowth_10 = {
	set_variable = { domestic_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_10_tt
}

ENG_SE_SetDomesticJobGrowth_15 = {
	set_variable = { domestic_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_15_tt
}

ENG_SE_SetDomesticJobGrowth_20 = {
	set_variable = { domestic_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_20_tt
}

ENG_SE_SetDomesticJobGrowth_25 = {
	set_variable = { domestic_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobGrowth_25_tt
}

ENG_SE_SetForeignJobGrowth_0.001 = {
	set_variable = { foreign_job_growth = 0.001 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.001_tt
}

ENG_SE_SetForeignJobGrowth_0.005 = {
	set_variable = { foreign_job_growth = 0.005 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.005_tt
}

ENG_SE_SetForeignJobGrowth_0.01 = {
	set_variable = { foreign_job_growth = 0.01 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.01_tt
}

ENG_SE_SetForeignJobGrowth_0.05 = {
	set_variable = { foreign_job_growth = 0.05 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.05_tt
}

ENG_SE_SetForeignJobGrowth_0.1 = {
	set_variable = { foreign_job_growth = 0.1 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.1_tt
}

ENG_SE_SetForeignJobGrowth_0.5 = {
	set_variable = { foreign_job_growth = 0.5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_0.5_tt
}

ENG_SE_SetForeignJobGrowth_1 = {
	set_variable = { foreign_job_growth = 1 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_1_tt
}

ENG_SE_SetForeignJobGrowth_2.5 = {
	set_variable = { foreign_job_growth = 2.5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_2.5_tt
}

ENG_SE_SetForeignJobGrowth_5 = {
	set_variable = { foreign_job_growth = 5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_5_tt
}

ENG_SE_SetForeignJobGrowth_10 = {
	set_variable = { foreign_job_growth = 10 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_10_tt
}

ENG_SE_SetForeignJobGrowth_15 = {
	set_variable = { foreign_job_growth = 15 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_15_tt
}

ENG_SE_SetForeignJobGrowth_20 = {
	set_variable = { foreign_job_growth = 20 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_20_tt
}

ENG_SE_SetForeignJobGrowth_25 = {
	set_variable = { foreign_job_growth = 25 }
	custom_effect_tooltip = ENG_SE_SetForeignJobGrowth_25_tt
}

### Set Job Loss ###

ENG_SE_SetDomesticJobLoss_0.001 = {
	set_variable = { domestic_job_growth = -0.001 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.001_tt
}

ENG_SE_SetDomesticJobLoss_0.005 = {
	set_variable = { domestic_job_growth = -0.005 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.005_tt
}

ENG_SE_SetDomesticJobLoss_0.01 = {
	set_variable = { domestic_job_growth = -0.01 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.01_tt
}

ENG_SE_SetDomesticJobLoss_0.05 = {
	set_variable = { domestic_job_growth = -0.05 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.05_tt
}

ENG_SE_SetDomesticJobLoss_0.1 = {
	set_variable = { domestic_job_growth = -0.1 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.1_tt
}

ENG_SE_SetDomesticJobLoss_0.5 = {
	set_variable = { domestic_job_growth = -0.5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_0.5_tt
}

ENG_SE_SetDomesticJobLoss_1 = {
	set_variable = { domestic_job_growth = -1 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_1_tt
}

ENG_SE_SetDomesticJobLoss_2.5 = {
	set_variable = { domestic_job_growth = -2.5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_2.5_tt
}

ENG_SE_SetDomesticJobLoss_5 = {
	set_variable = { domestic_job_growth = -5 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_5_tt
}

ENG_SE_SetDomesticJobLoss_10 = {
	set_variable = { domestic_job_growth = -10 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_10_tt
}

ENG_SE_SetDomesticJobLoss_15 = {
	set_variable = { domestic_job_growth = -15 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_15_tt
}

ENG_SE_SetDomesticJobLoss_20 = {
	set_variable = { domestic_job_growth = -20 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_20_tt
}

ENG_SE_SetDomesticJobLoss_25 = {
	set_variable = { domestic_job_growth = -25 }
	custom_effect_tooltip = ENG_SE_SetDomesticJobLoss_25_tt
}

ENG_SE_SetForeignJobLoss_0.001 = {
	set_variable = { foreign_job_growth = -0.001 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.001_tt
}

ENG_SE_SetForeignJobLoss_0.005 = {
	set_variable = { foreign_job_growth = -0.005 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.005_tt
}

ENG_SE_SetForeignJobLoss_0.01 = {
	set_variable = { foreign_job_growth = -0.01 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.01_tt
}

ENG_SE_SetForeignJobLoss_0.05 = {
	set_variable = { foreign_job_growth = -0.05 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.05_tt
}

ENG_SE_SetForeignJobLoss_0.1 = {
	set_variable = { foreign_job_growth = -0.1 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.1_tt
}

ENG_SE_SetForeignJobLoss_0.5 = {
	set_variable = { foreign_job_growth = -0.5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_0.5_tt
}

ENG_SE_SetForeignJobLoss_1 = {
	set_variable = { foreign_job_growth = -1 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_1_tt
}

ENG_SE_SetForeignJobLoss_2.5 = {
	set_variable = { foreign_job_growth = -2.5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_2.5_tt
}

ENG_SE_SetForeignJobLoss_5 = {
	set_variable = { foreign_job_growth = -5 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_5_tt
}

ENG_SE_SetForeignJobLoss_10 = {
	set_variable = { foreign_job_growth = -10 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_10_tt
}

ENG_SE_SetForeignJobLoss_15 = {
	set_variable = { foreign_job_growth = -15 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_15_tt
}

ENG_SE_SetForeignJobLoss_20 = {
	set_variable = { foreign_job_growth = -20 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_20_tt
}

ENG_SE_SetForeignJobLoss_25 = {
	set_variable = { foreign_job_growth = -25 }
	custom_effect_tooltip = ENG_SE_SetForeignJobLoss_25_tt
}

FEN_decrease_hunger = {
	if = {
		limit = { has_idea = FEN_Food_Insecurity }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity
			add_idea = FEN_Food_Insecurity_2
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_2 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_2
			add_idea = FEN_Food_Insecurity_3
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_3 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_3
			add_idea = FEN_Food_Insecurity_4
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_4 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_4
			add_idea = FEN_Food_Insecurity_5
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_5 }
		remove_ideas = FEN_Food_Insecurity_5
	}
	else = {
		add_stability = 0.05
	}
}







FEN_increase_hunger = {
	if = {
		limit = { has_idea = FEN_Food_Insecurity_5 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_5
			add_idea = FEN_Food_Insecurity_4
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_4 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_4
			add_idea = FEN_Food_Insecurity_3
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_3 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_3
			add_idea = FEN_Food_Insecurity_2
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity_2 }
		swap_ideas = {
			remove_idea = FEN_Food_Insecurity_2
			add_idea = FEN_Food_Insecurity
		}
	}
	else_if = {
		limit = { has_idea = FEN_Food_Insecurity }
		add_stability = -0.05
	}
	else = {
		add_ideas = FEN_Food_Insecurity
	}
}
















#FEN_decrease_crime = {
#	if = {
#		limit = { has_idea = FEN_Urban_Crime }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime
#			add_idea = FEN_Urban_Crime_2
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_2 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_2
#			add_idea = FEN_Urban_Crime_3
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_3 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_3
#			add_idea = FEN_Urban_Crime_4
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_4 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_4
#			add_idea = FEN_Urban_Crime_5
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_5 }
#		remove_ideas = FEN_Urban_Crime_5
#	}
#	else = {
#		add_stability = 0.05
#	}
#}

#FEN_increase_crime = {
#	if = {
#		limit = { has_idea = FEN_Urban_Crime_5 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_5
#			add_idea = FEN_Urban_Crime_4
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_4 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_4
#			add_idea = FEN_Urban_Crime_3
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_3 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_3
#			add_idea = FEN_Urban_Crime_2
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime_2 }
#		swap_ideas = {
#			remove_idea = FEN_Urban_Crime_2
#			add_idea = FEN_Urban_Crime
#		}
#	}
#	else_if = {
#		limit = { has_idea = FEN_Urban_Crime }
#		add_stability = -0.05
#	}
#	else = {
#		add_ideas = FEN_Urban_Crime
#	}
#}



ENG_Increase_OFN_Influence_0_5 = {
	custom_effect_tooltip = ENG_OFN_Influence_Increase_0_5_tt
	add_to_variable = {
		ENG.ENG_OFN_Influence_Increase = 0.5
	}
}

ENG_Increase_OFN_Influence_1 = {
	custom_effect_tooltip = ENG_OFN_Influence_Increase_1_tt
	add_to_variable = {
		ENG.ENG_OFN_Influence_Increase = 1
	}
}

ENG_Increase_OFN_Influence_1_5 = {
	custom_effect_tooltip = ENG_OFN_Influence_Increase_1_5_tt
	add_to_variable = {
		ENG.ENG_OFN_Influence_Increase = 1.5
	}
}

ENG_Increase_OFN_Influence_2 = {
	custom_effect_tooltip = ENG_OFN_Influence_Increase_2_tt
	add_to_variable = {
		ENG.ENG_OFN_Influence_Increase = 2
	}
}

ENG_Decrease_OFN_Influence_0_5 = {
	custom_effect_tooltip = ENG_OFN_Influence_Decrease_0_5_tt
	subtract_from_variable = {
		ENG.ENG_OFN_Influence_Increase = 0.5
	}
}

ENG_Decrease_OFN_Influence_1 = {
	custom_effect_tooltip = ENG_OFN_Influence_Decrease_1_tt
	subtract_from_variable = {
		ENG.ENG_OFN_Influence_Increase = 1
	}
}

ENG_Decrease_OFN_Influence_1_5 = {
	custom_effect_tooltip = ENG_OFN_Influence_Decrease_1_5_tt
	subtract_from_variable = {
		ENG.ENG_OFN_Influence_Increase = 1.5
	}
}

ENG_Decrease_OFN_Influence_2 = {
	custom_effect_tooltip = ENG_OFN_Influence_Decrease_2_tt
	subtract_from_variable = {
		ENG.ENG_OFN_Influence_Increase = 2
	}
}

ENG_Decrease_OFN_Influence_4 = {
	custom_effect_tooltip = ENG_OFN_Influence_Decrease_4_tt
	subtract_from_variable = {
		ENG.ENG_OFN_Influence_Increase = 4
	}
}

ENG_Increase_PAKT_Influence_0_5 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Increase_0_5_tt
	add_to_variable = {
		ENG.ENG_PAKT_Influence_Increase = 0.5
	}
}

ENG_Increase_PAKT_Influence_1 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Increase_1_tt
	add_to_variable = {
		ENG.ENG_PAKT_Influence_Increase = 1
	}
}

ENG_Increase_PAKT_Influence_1_5 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Increase_1_5_tt
	add_to_variable = {
		ENG.ENG_PAKT_Influence_Increase = 1.5
	}
}

ENG_Increase_PAKT_Influence_2 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Increase_2_tt
	add_to_variable = {
		ENG.ENG_PAKT_Influence_Increase = 2
	}
}



ENG_Decrease_PAKT_Influence_0_5 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Decrease_0_5_tt
	subtract_from_variable = {
		ENG.ENG_PAKT_Influence_Increase = 0.5
	}
}

ENG_Decrease_PAKT_Influence_1 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Decrease_1_tt
	subtract_from_variable = {
		ENG.ENG_PAKT_Influence_Increase = 1
	}
}

ENG_Decrease_PAKT_Influence_1_5 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Decrease_1_5_tt
	subtract_from_variable = {
		ENG.ENG_PAKT_Influence_Increase = 1.5
	}
}

ENG_Decrease_PAKT_Influence_2 = {
	custom_effect_tooltip = ENG_PAKT_Influence_Decrease_2_tt
	subtract_from_variable = {
		ENG.ENG_PAKT_Influence_Increase = 2
	}
}


ENG_Decrease_Scottish_Terrorism = {
	if = {
		limit = {
			has_idea = ENG_Scottish_Civil_Unrest
		}
		remove_ideas = ENG_Scottish_Civil_Unrest
	}
	else_if = {
		limit = {
			has_idea = ENG_Scottish_Protests
		}
		swap_ideas = {
			remove_idea = ENG_Scottish_Protests
			add_idea = ENG_Scottish_Civil_Unrest
		}
		country_event = {
			id = ENG_Scotland_unification.34
			days = 1825
		}

	}
	else_if = {
		limit = {
			has_idea = ENG_Scottish_Riots
		}
		swap_ideas = {
			remove_idea = ENG_Scottish_Riots
			add_idea = ENG_Scottish_Protests
		}

		country_event = {
			id = ENG_Scotland_unification.34
			days = 720
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Scottish_Resistance
		}
		swap_ideas = {
			remove_idea = ENG_Scottish_Resistance
			add_idea = ENG_Scottish_Riots
		}

		country_event = {
			id = ENG_Scotland_unification.34
			days = 360
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Scottish_Terrorism
		}
		swap_ideas = {
			remove_idea = ENG_Scottish_Terrorism
			add_idea = ENG_Scottish_Resistance
		}
		country_event = {
			id = ENG_Scotland_unification.34
			days = 180
		}
	}
	else_if = {
		limit = {
			has_country_flag = ENG_Scottish_Violent
		}
		add_ideas = ENG_Scottish_Terrorism
		country_event = {
			id = ENG_Scotland_unification.34
			days = 180
		}
		hidden_effect = {
			ENG_Rejoin_faction_balance = yes
		}
	}
	
}

ENG_Decrease_Welsh_Terrorism = {
	if = {
		limit = {
			has_idea = ENG_Wales_Civil_Unrest
		}
		remove_ideas = ENG_Wales_Civil_Unrest
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Protests
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Protests
			add_idea = ENG_Wales_Civil_Unrest
		}
		country_event = {
			id = ENG_Wales_unification.16
			days = 1825
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Riots
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Riots
			add_idea = ENG_Wales_Protests
		}
		country_event = {
			id = ENG_Wales_unification.16
			days = 720
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Resistance
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Resistance
			add_idea = ENG_Wales_Riots
		}
		country_event = {
			id = ENG_Wales_unification.16
			days = 360
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Terrorism
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Terrorism
			add_idea = ENG_Wales_Resistance
		}
		country_event = {
			id = ENG_Wales_unification.16
			days = 180
		}
	}
	else_if = {
		limit = {
			has_country_flag = ENG_Wales_Violent
		}
		add_ideas = ENG_Wales_Terrorism
		country_event = {
			id = ENG_Wales_unification.16
			days = 180
		}
		hidden_effect = {
			ENG_Rejoin_faction_balance = yes
		}
	}
}

ENG_Increase_Welsh_Terrorism = {
	if = {
		limit = {
			has_idea = ENG_Wales_Resistance
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Resistance
			add_idea = ENG_Wales_Terrorism
		}
		remove_state_core = 1301
		remove_state_core = 122
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Riots
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Riots
			add_idea = ENG_Wales_Resistance
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Protests
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Protests
			add_idea = ENG_Wales_Riots
		}
	}
	else_if = {
		limit = {
			has_idea = ENG_Wales_Civil_Unrest
		}
		swap_ideas = {
			remove_idea = ENG_Wales_Civil_Unrest
			add_idea = ENG_Wales_Protests
		}
	}
}


ENG_Kick_from_faction_balance = {
	if = {
		limit = {
			is_in_faction_with = USA
		}
		leave_faction = yes
		set_country_flag = ENG_Joined_OFN_Balance
		every_other_country = {
			limit = {
				is_in_faction_with = USA
			}
			diplomatic_relation = {
			    country = ENG
			    relation = military_access
			    active = yes
			}
		}
	}
	if = {
		limit = {
			is_in_faction_with = GER
		}
		leave_faction = yes
		set_country_flag = ENG_Joined_PAKT_Balance
		every_other_country = {
			limit = {
				is_in_faction_with = GER
			}
			diplomatic_relation = {
			    country = ENG
			    relation = military_access
			    active = yes
			}
		}
	}
}

ENG_Rejoin_faction_balance = {
	if = {
		limit = {
			ENG = {
				has_war = no
			}
		}
		if = {
			limit = {
				has_country_flag = ENG_Joined_OFN_Balance
			}
			every_country = {
				limit = {
					is_in_faction_with = USA
				}
				diplomatic_relation = {
					country = ENG
					relation = military_access
					active = no
				}
			}
			USA = {
				add_to_faction = ENG
			}
			clr_country_flag = ENG_Joined_OFN_Balance
		}
		if = {
			limit = {
				has_country_flag = ENG_Joined_PAKT_Balance
			}
			every_country = {
				limit = {
					is_in_faction_with = GER
				}
				diplomatic_relation = {
					country = ENG
					relation = military_access
					active = no
				}
			}
			GER = {
				add_to_faction = ENG
			}
			clr_country_flag = ENG_Joined_PAKT_Balance
		}
	}
}

ENG_focus_tree_swap_collab = {
	mark_focus_tree_layout_dirty = yes
}

ENG_focus_tree_swap_hmmlr = {
	mark_focus_tree_layout_dirty = yes
}


UE_INNER_POLITICS_CALC = {
	if = {
		limit = {
			AND = {
				NOT = {
					has_idea = ENG_UE_INNER_POLITICS1
						}
		check_variable = { ENG_Mac_Lovers < 0.01 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS1
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.125
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS2
			}
		check_variable = { ENG_Mac_Lovers > 0 }	
		check_variable = { ENG_Mac_Lovers < 0.11 }
		}
	} 
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS2
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.1
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS3
			}
		check_variable = { ENG_Mac_Lovers > 0.1 }	
		check_variable = { ENG_Mac_Lovers < 0.21 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS3
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.08
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS4
			}
		check_variable = { ENG_Mac_Lovers > 0.2 }	
		check_variable = { ENG_Mac_Lovers < 0.31 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS4
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.06
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS5
			}
		check_variable = { ENG_Mac_Lovers > 0.3 }	
		check_variable = { ENG_Mac_Lovers < 0.41 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS5
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.04
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS6
			}
		check_variable = { ENG_Mac_Lovers > 0.4 }	
		check_variable = { ENG_Mac_Lovers < 0.5 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS6
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = -0.02
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS7
			}
		check_variable = { ENG_Mac_Lovers > 0.49 }	
		check_variable = { ENG_Mac_Lovers < 0.51 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS7
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS8
			}
		check_variable = { ENG_Mac_Lovers > 0.5 }	
		check_variable = { ENG_Mac_Lovers < 0.61 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS8
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.02
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS9
			}
		check_variable = { ENG_Mac_Lovers > 0.6 }	
		check_variable = { ENG_Mac_Lovers < 0.71 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS9
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.04
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS10
			}
		check_variable = { ENG_Mac_Lovers > 0.7 }	
		check_variable = { ENG_Mac_Lovers < 0.81 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS10
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.06
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS11
			}
		check_variable = { ENG_Mac_Lovers > 0.8 }	
		check_variable = { ENG_Mac_Lovers < 0.91 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS11
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.08
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS12
			}
		check_variable = { ENG_Mac_Lovers > 0.9 }	
		check_variable = { ENG_Mac_Lovers < 1 }
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS12
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.1
		}
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_UE_INNER_POLITICS13
			}
		check_variable = { ENG_Mac_Lovers > 0.99 }	
		}
	}
		UE_INNER_POLITICS_IDEA_PURGE = yes
		add_ideas = ENG_UE_INNER_POLITICS13
		set_variable = {
			var = MAC_MECH_GOVTSTAB
			value = 0.125
		}
	}
	UE_INNER_POLITICS_GOVT_STAB_CALC = yes
}

UE_INNER_POLITICS_IDEA_PURGE = {
	remove_ideas = {
		ENG_UE_INNER_POLITICS1
		ENG_UE_INNER_POLITICS2
		ENG_UE_INNER_POLITICS3
		ENG_UE_INNER_POLITICS4
		ENG_UE_INNER_POLITICS5
		ENG_UE_INNER_POLITICS6
		ENG_UE_INNER_POLITICS7
		ENG_UE_INNER_POLITICS8
		ENG_UE_INNER_POLITICS9
		ENG_UE_INNER_POLITICS10
		ENG_UE_INNER_POLITICS11
		ENG_UE_INNER_POLITICS12
		ENG_UE_INNER_POLITICS13
	}
}

UE_INNER_POLITICS_GOVT_STAB_CALC = {
	add_to_variable = { ParliamentMechanic_GovStab = MAC_MECH_GOVTSTAB } 
	subtract_from_variable = { ParliamentMechanic_GovStab = MAC_MECH_GOVTSTAB_OLD }
	clamp_variable = {
		var = ParliamentMechanic_GovStab
		min = 0
		max = 1
	}
	clear_variable = MAC_MECH_GOVTSTAB_OLD
	set_variable = {
		var = MAC_MECH_GOVTSTAB_OLD
		value = MAC_MECH_GOVTSTAB
	}
}


RP_POP_SPLIT_CALC = {
	if = {
		limit = {
			AND = {
				NOT = {
					has_idea = ENG_RP_POP_SPLIT1
						}
		check_variable = { ENG_Populist_Lovers < 0.11 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT1
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT2
			}
			check_variable = { ENG_Populist_Lovers > 0.1 }	
			check_variable = { ENG_Populist_Lovers < 0.21 }
		}
	} 
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT2
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT3
			}
			check_variable = { ENG_Populist_Lovers > 0.2 }	
			check_variable = { ENG_Populist_Lovers < 0.31 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT3
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT4
			}
			check_variable = { ENG_Populist_Lovers > 0.3 }	
			check_variable = { ENG_Populist_Lovers < 0.41 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT4
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT5
			}
			check_variable = { ENG_Populist_Lovers > 0.4 }	
			check_variable = { ENG_Populist_Lovers < 0.5 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT5
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT6
			}
		check_variable = { ENG_Populist_Lovers > 0.49 }	
		check_variable = { ENG_Populist_Lovers < 0.51 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT6
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT7
			}
		check_variable = { ENG_Populist_Lovers > 0.5 }	
		check_variable = { ENG_Populist_Lovers < 0.6 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT7
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT8
			}
		check_variable = { ENG_Populist_Lovers > 0.59 }	
		check_variable = { ENG_Populist_Lovers < 0.7 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT8
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT9
			}
		check_variable = { ENG_Populist_Lovers > 0.69 }	
		check_variable = { ENG_Populist_Lovers < 0.8 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT9
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT10
			}
		check_variable = { ENG_Populist_Lovers > 0.79 }	
		check_variable = { ENG_Populist_Lovers < 0.9 }
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT10
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_POP_SPLIT11
			}
		check_variable = { ENG_Populist_Lovers > 0.89 }	
		}
	}
		RP_POP_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_POP_SPLIT11
	}
}

RP_POP_SPLIT_IDEA_PURGE = {
	remove_ideas = {
		ENG_RP_POP_SPLIT1
		ENG_RP_POP_SPLIT2
		ENG_RP_POP_SPLIT3
		ENG_RP_POP_SPLIT4
		ENG_RP_POP_SPLIT5
		ENG_RP_POP_SPLIT6
		ENG_RP_POP_SPLIT7
		ENG_RP_POP_SPLIT8
		ENG_RP_POP_SPLIT9
		ENG_RP_POP_SPLIT10
		ENG_RP_POP_SPLIT11
	}
}

RP_ELITE_SPLIT_CALC = {
	if = {
		limit = {
			AND = {
				NOT = {
					has_idea = ENG_RP_ELITE_SPLIT1
						}
		check_variable = { ENG_Elite_Lovers < 0.11 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT1
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT2
			}
			check_variable = { ENG_Elite_Lovers > 0.1 }	
			check_variable = { ENG_Elite_Lovers < 0.21 }
		}
	} 
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT2
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT3
			}
			check_variable = { ENG_Elite_Lovers > 0.2 }	
			check_variable = { ENG_Elite_Lovers < 0.31 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT3
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT4
			}
			check_variable = { ENG_Elite_Lovers > 0.3 }	
			check_variable = { ENG_Elite_Lovers < 0.41 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT4
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT5
			}
			check_variable = { ENG_Elite_Lovers > 0.4 }	
			check_variable = { ENG_Elite_Lovers < 0.5 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT5
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT6
			}
		check_variable = { ENG_Elite_Lovers > 0.49 }	
		check_variable = { ENG_Elite_Lovers < 0.51 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT6
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT7
			}
		check_variable = { ENG_Elite_Lovers > 0.5 }	
		check_variable = { ENG_Elite_Lovers < 0.6 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT7
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT8
			}
		check_variable = { ENG_Elite_Lovers > 0.59 }	
		check_variable = { ENG_Elite_Lovers < 0.7 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT8
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT9
			}
		check_variable = { ENG_Elite_Lovers > 0.69 }	
		check_variable = { ENG_Elite_Lovers < 0.8 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT9
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT10
			}
		check_variable = { ENG_Elite_Lovers > 0.79 }	
		check_variable = { ENG_Elite_Lovers < 0.9 }
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT10
	}
	if = {
		limit = {
			AND = {
				NOT = {
				has_idea = ENG_RP_ELITE_SPLIT11
			}
		check_variable = { ENG_Elite_Lovers > 0.89 }	
		}
	}
		RP_ELITE_SPLIT_IDEA_PURGE = yes
		add_ideas = ENG_RP_ELITE_SPLIT11
	}
}

RP_ELITE_SPLIT_IDEA_PURGE = {
	remove_ideas = {
		ENG_RP_ELITE_SPLIT1
		ENG_RP_ELITE_SPLIT2
		ENG_RP_ELITE_SPLIT3
		ENG_RP_ELITE_SPLIT4
		ENG_RP_ELITE_SPLIT5
		ENG_RP_ELITE_SPLIT6
		ENG_RP_ELITE_SPLIT7
		ENG_RP_ELITE_SPLIT8
		ENG_RP_ELITE_SPLIT9
		ENG_RP_ELITE_SPLIT10
		ENG_RP_ELITE_SPLIT11
	}
}



### Updating Pie Chart - by Matt the Radar Technician

## P.S. Thanks Lam!

 TotalPopCalc = {
	if = {
		limit = { has_global_flag = ENG_GF_WonEcw }
		set_variable = { ENG.TotalPop_Mac = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_Mac = ElectionSeason_State_PartyPop^0 }
		}
		set_variable = { ENG.TotalPop_Lib = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_Lib = ElectionSeason_State_PartyPop^1 }
		}
		set_variable = { ENG.TotalPop_RP = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_RP = ElectionSeason_State_PartyPop^2 }
		}
		set_variable = { ENG.TotalPop_NF = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_NF = ElectionSeason_State_PartyPop^3 }
		}
		set_variable = { ENG.TotalPop_All = 0 }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_Mac }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_Lib }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_RP }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_NF }

		divide_variable = { ENG.TotalPop_Mac = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_Mac = 100 }
		round_variable = ENG.TotalPop_Mac

		divide_variable = { ENG.TotalPop_Lib = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_Lib = 100 }
		round_variable = ENG.TotalPop_Lib

		divide_variable = { ENG.TotalPop_RP = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_RP = 100 }
		round_variable = ENG.TotalPop_RP

		divide_variable = { ENG.TotalPop_NF = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_NF = 100 }
		round_variable = ENG.TotalPop_NF

		set_variable = { ENG.remaining_pop = 100 }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_Mac }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_Lib }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_RP }

		set_popularities = {
			social_conservative = ENG.TotalPop_Mac
			social_liberal = ENG.TotalPop_Lib
			authoritarian_democrat = ENG.TotalPop_RP
			fascism = ENG.remaining_pop
		}
	}

	if = {
		limit = { has_global_flag = FEN_GF_WonEcw }
		set_variable = { ENG.TotalPop_Whigs = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_Whigs = ElectionSeason_State_PartyPop^0 }
		}
		set_variable = { ENG.TotalPop_Democrats = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_Democrats = ElectionSeason_State_PartyPop^1 }
		}
		set_variable = { ENG.TotalPop_Patriots = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_Patriots = ElectionSeason_State_PartyPop^2 }
		}
		set_variable = { ENG.TotalPop_SLProgress = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_SLProgress = ElectionSeason_State_PartyPop^3 }
		}
		set_variable = { ENG.TotalPop_SLPollitites = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_SLPollitites = ElectionSeason_State_PartyPop^4 }
		}
		set_variable = { ENG.TotalPop_MSA = 0 }
		every_owned_state = {
			add_to_variable = { ENG.TotalPop_MSA = ElectionSeason_State_PartyPop^5 }
		}
		set_variable = { ENG.TotalPop_All = 0 }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_Whigs }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_Democrats }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_Patriots }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_SLProgress }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_SLPollitites }
		add_to_variable = {ENG.TotalPop_All = ENG.TotalPop_MSA }

		divide_variable = { ENG.TotalPop_Whigs = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_Whigs = 100 }
		round_variable = ENG.TotalPop_Whigs

		divide_variable = { ENG.TotalPop_Democrats = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_Democrats = 100 }
		round_variable = ENG.TotalPop_Democrats

		divide_variable = { ENG.TotalPop_Patriots = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_Patriots = 100 }
		round_variable = ENG.TotalPop_Patriots

		divide_variable = { ENG.TotalPop_SLProgress = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_SLProgress = 100 }
		round_variable = ENG.TotalPop_SLProgress

		divide_variable = { ENG.TotalPop_SLPollitites = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_SLPollitites = 100 }
		round_variable = ENG.TotalPop_SLPollitites

		divide_variable = { ENG.TotalPop_MSA = ENG.TotalPop_All }
		multiply_variable = { ENG.TotalPop_MSA = 100 }
		round_variable = ENG.TotalPop_MSA

		set_variable = { ENG.remaining_pop = 100 }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_Whigs }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_Democrats }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_Patriots }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_SLProgress }
		subtract_from_variable = { ENG.remaining_pop = ENG.TotalPop_SLPollitites }

		set_popularities = {
			social_conservative = ENG.TotalPop_Democrats
			social_liberal = ENG.TotalPop_Whigs
			authoritarian_democrat = ENG.TotalPop_Patriots
			Socialist = ENG.TotalPop_SLProgress
			communist = ENG.TotalPop_SLPollitites
			despotism = ENG.remaining_pop
		}
	}
 }
 
 ENG_ECW_select_victor = { #Copy of GCW system

	#Meant to operate using a points based system, to attempt to gauge the prospective victor.

	#Collabs
	if = {
		limit = { country_exists = ENG }
		ENG = {
			set_variable = { ECW_manpower = num_divisions }
			set_variable = { ECW_equipment = num_equipment_in_armies_k@infantry_equipment }
			set_variable = { ECW_surrender_progress = surrender_progress }
		}
	}
	#HMMLR
	if = {
		limit = { country_exists = FEN }
		FEN = {
			set_variable = { ECW_manpower = num_divisions }
			set_variable = { ECW_equipment = num_equipment_in_armies_k@infantry_equipment }
			set_variable = { ECW_surrender_progress = surrender_progress }
		}
	}

	#Point distribution

	#Manpower
	if = {
		limit = {
			check_variable = { FEN.ECW_manpower > ENG.ECW_manpower }
		}
		add_to_variable = { FEN_points = 1 }
		else = {
			add_to_variable = { ENG_points = 1 }
		}
	}

	#Equipment
	if = {
		limit = {
			check_variable = { FEN.ECW_equipment > ENG.ECW_equipment }
		}
		add_to_variable = { FEN_points = 1 }
		else = {
			add_to_variable = { ENG_points = 1 }
		}
	}

	#Surrender progress
	if = {
		limit = {
			check_variable = { FEN.ECW_surrender_progress < ENG.ECW_surrender_progress }
		}
		add_to_variable = { FEN_points = 1 }
		else = {
			add_to_variable = { ENG_points = 1 }
		}
	}

	#Choosing the victor
	if = {
		limit = {
			check_variable = { FEN_points > ENG_points }
		}
		FEN = {
			add_ideas = GCW_hidden_holy_shit_win_already
		}
		else = {
			ENG = { add_ideas = GCW_hidden_holy_shit_win_already }
		}
	}
}

ENG_cornwall_setup = { #Everything that needs to be done after taking Cornwall
	log = "[GetDateText]: [Root.GetName]: ENG_cornwall_setup; Executing"
	hidden_effect = {
		ENG_SE_AddEveryNewStateEcon = yes
		set_country_flag = ENG_cornwall_united
		TNO_Britain_ElectionSeason_Initialize_Cornwall_Collab = yes
	}
	log = "[GetDateText]: [Root.GetName]: ENG_cornwall_setup; Completed Execution."
}

ENG_wales_setup = { #Everything that needs to be done after taking Wales
	log = "[GetDateText]: [Root.GetName]: ENG_wales_setup; Executing"
	hidden_effect = {
		country_event = {
			id = ENG_Econ.3
		}
		set_country_flag = ENG_wales_united

		# Election
		if = {
			limit = {
				has_global_flag = FEN_GF_WonEcw
			}
			TNO_Britain_ElectionSeason_Initialize_Wales_HMMLR = yes
		}
		else = {	
			TNO_Britain_ElectionSeason_Initialize_Wales_Collab = yes	
		}
		# Cosmetic tag
		if = {
			limit = {
				has_country_flag = ENG_government_republic
				NOT = { has_cosmetic_tag = ENG_commonwealth_england_and_wales }
				NOT = { has_cosmetic_tag = ENG_commonwealth_britain }
			}
			drop_cosmetic_tag = yes
			set_cosmetic_tag = ENG_commonwealth_england_and_wales
		}
		else_if = {
			limit = {
				NOT = { has_cosmetic_tag = ENG_england_and_wales }
				NOT = { has_cosmetic_tag = ENG_united_kingdom }
			}
			drop_cosmetic_tag = yes
			set_cosmetic_tag = ENG_england_and_wales
		}
	}
	# Resistance
	if = {
		limit = {
			has_country_flag = ENG_Wales_Violent
		}
		country_event = {
			id = ENG_Wales_unification.16
			days = 1
		}
		every_country = {
			news_event = {
				id = WORLD.50006
				days = 1
			}
		}
	}
	else = {
		add_state_core = 1301
		add_state_core = 122
		add_ideas = ENG_Wales_Riots
		hidden_effect = {
			country_event = {
				id = ENG_Wales_unification.16
				days = 360
			}
			every_country = {
				news_event = {
					id = WORLD.50005
					days = 1
				}
			}
		}
		WAL = {
			every_unit_leader = {
				set_nationality = ENG
			}
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_wales_setup; Completed Execution."
}

ENG_scotland_setup = { #Everything that needs to be done after taking Scotland
	log = "[GetDateText]: [Root.GetName]: ENG_scotland_setup; Executing"
	hidden_effect = {
		country_event = {
			id = ENG_Econ.3
		}
		set_country_flag = ENG_scotland_united

		# Election
		if = {
			limit = {
				has_global_flag = FEN_GF_WonEcw
			}
			TNO_Britain_ElectionSeason_Initialize_Scotland_HMMLR = yes
		}
		else = {	
			TNO_Britain_ElectionSeason_Initialize_Scotland_Collab = yes	
		}
		# Cosmetic tag
		if = {
			limit = {
				has_country_flag = ENG_government_republic
				NOT = { has_cosmetic_tag = ENG_commonwealth_britain }
			}
			drop_cosmetic_tag = yes
			set_cosmetic_tag = ENG_commonwealth_britain
		}
		else_if = {
			limit = {
				NOT = { has_cosmetic_tag = ENG_united_kingdom }
			}
			drop_cosmetic_tag = yes
			set_cosmetic_tag = ENG_united_kingdom
		}
	}
	# Resistance
	if = {
		limit = {
			has_country_flag = ENG_Scottish_Violent
		}
		country_event = {
			id = ENG_Scotland_unification.34
			days = 1
		}
		every_country = {
			news_event = {
				id = WORLD.50009
				days = 1
			}
		}
	}
	else = {
		if = {
			limit = {
				NOT = {
					OR = {
						has_idea = ENG_Scottish_Terrorism
						has_idea = ENG_Scottish_Resistance
						has_idea = ENG_Scottish_Riots
						has_idea = ENG_Scottish_Protests
						has_idea = ENG_Scottish_Civil_Unrest
					}
				}
			}
			add_state_core = 1322
			add_state_core = 120
			add_state_core = 136
			add_state_core = 1320
			add_state_core = 133
			add_state_core = 1321
			add_state_core = 121
			add_ideas = ENG_Scottish_Riots
			hidden_effect = {
				country_event = {
					id = ENG_Scotland_unification.34
					days = 360
				}
			}
		}
		SCO = {
			every_unit_leader = {
				set_nationality = ENG
			}
		}
		hidden_effect = {
			news_event = {
				id = WORLD.50010
				days = 1
			}
		}
	}
	log = "[GetDateText]: [Root.GetName]: ENG_scotland_setup; Completed Execution."
}

ENG_AI_Next_UE_Dec = {
	if = {
		limit = {
			OR = {
				AND = {
					has_country_flag = ENG_mac_shadowmaster
					check_variable = { ENG_Mac_Lovers = 1 }
				}
				AND = {
					has_country_flag = ENG_mac_liberal
					check_variable = { ENG_Lib_Lovers = 1 }
				}
			}
		}
		set_variable = { ENG_Next_UE_Dec^0 = 0 }
		set_variable = { ENG_Next_UE_Dec^3 = 0 }
		if = {
			limit = {
				check_variable = { ENG_MIL_LOY > 99 }
			}
			set_variable = { ENG_Next_UE_Dec^4 = 0 }
		}
		else = {
			set_variable = { ENG_Next_UE_Dec^4 = 5 }
		}
		if = {
			limit = {
				OR = {
					AND = {
						has_country_flag = ENG_mac_shadowmaster
						check_variable = { ENG_democratization_process = 0 }
					}
					AND = {
						has_country_flag = ENG_mac_liberal
						check_variable = { ENG_democratization_process = 100 }
					}
				}
			}
			set_variable = { ENG_Next_UE_Dec^1 = 0 }
			if = {
				limit = {
					has_country_flag = ENG_mac_liberal
				}
				set_variable = { ENG_Next_UE_Dec^5 = 0 }
			}
			else = {
				set_variable = { ENG_Next_UE_Dec^5 = 5 }
			}
		}
		else = {
			set_variable = { ENG_Next_UE_Dec^1 = 5 }
			set_variable = { ENG_Next_UE_Dec^5 = 5 }
		}
	}
	else = { # No need to re-add ENG_Next_UE_Dec^3
		set_variable = { ENG_Next_UE_Dec^0 = 5 }
		set_variable = { ENG_Next_UE_Dec^1 = 5 }
		set_variable = { ENG_Next_UE_Dec^4 = 5 }
		set_variable = { ENG_Next_UE_Dec^5 = 5 }
	}
	if = {
		limit = {
			check_variable = { ENG_MIL_LOY > 99 }
		}
		set_variable = { ENG_Next_UE_Dec^6 = 0 }
	}
	else = {
		set_variable = { ENG_Next_UE_Dec^6 = 5 }
	}
	if = {
		limit = {
			check_variable = { ENG_MIL_EFF > 99 }
		}
		set_variable = { ENG_Next_UE_Dec^7 = 0 }
	}
	else = {
		set_variable = { ENG_Next_UE_Dec^7 = 5 }
	}
	random_list = {
		ENG_Next_UE_Dec^0 = {
			set_variable = { ENG_Next_UE_Dec_R = 1 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 1"
		}
		ENG_Next_UE_Dec^0 = {
			set_variable = { ENG_Next_UE_Dec_R = 2 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 2"
		}
		ENG_Next_UE_Dec^1 = {
			set_temp_variable = { ENG_Lib_Lovers_Percent = ENG_Lib_Lovers }
			multiply_temp_variable = { ENG_Lib_Lovers_Percent = 100}
			if = {
				limit = {
					check_variable = { ENG_democratization_process < ENG_Lib_Lovers_Percent }
				}
				set_variable = { ENG_Next_UE_Dec_R = 3 }
				log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 3"
			}
			else_if = {
				limit = {
					check_variable = { ENG_democratization_process > ENG_Lib_Lovers_Percent }
				}
				set_variable = { ENG_Next_UE_Dec_R = 4 }
				log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 4"
			}
			else = {
				set_country_flag = {
					flag = ENG_Next_UE_Dec
					value = 1
				}
				log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 3,4 to 1"
			}
		}
		ENG_Next_UE_Dec^2 = {
			set_variable = { ENG_Next_UE_Dec_R = 5 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 5"
		}
		ENG_Next_UE_Dec^3 = {
			set_variable = { ENG_Next_UE_Dec_R = 6 }
			set_variable = { ENG_Next_UE_Dec^3 = 0 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 6"
		}
		ENG_Next_UE_Dec^4 = {
			set_variable = { ENG_Next_UE_Dec_R = 7 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 7"
		}
		ENG_Next_UE_Dec^5 = {
			set_variable = { ENG_Next_UE_Dec_R = 8 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 8"
		}
		ENG_Next_UE_Dec^6 = {
			set_variable = { ENG_Next_UE_Dec_R = 9 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 9"
		}
		ENG_Next_UE_Dec^6 = {
			set_variable = { ENG_Next_UE_Dec_R = 10 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 10"
		}
		ENG_Next_UE_Dec^7 = {
			set_variable = { ENG_Next_UE_Dec_R = 11 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 11"
		}
		ENG_Next_UE_Dec^7 = {
			set_variable = { ENG_Next_UE_Dec_R = 12 }
			log = "[GetDateText]: [Root.GetName]: ENG_AI_Next_UE_Dec; Result 12"
		}
	}
}

#Cornwall MECHANIC

ENG_initialize_cornwall_mechanic = {
	set_variable = { ENG_Cornwall_State = 2 }
	set_variable = { ENG_Cornwall_Happiness = 3 }
	set_country_flag = ENG_cornwall_mechanic
	set_variable = { ENG_CRN_Planning = -0.10 }
	set_variable = { ENG_CRN_Org = -0.10 }
	set_variable = { ENG_CRN_Morale = -0.10 }
	set_variable = { ENG_CRN_Attack = -0.10 }
	set_variable = { ENG_CRN_Defense = -0.10 }
	set_variable = { ENG_CRN_Speed = -0.10 }
	set_variable = { cornwall_demand_swap = 1 }
	set_variable = { cornwall_started_demand = 0 }
	set_variable = { ENG_Cornwall_Counter = 0 }
}

ENG_update_cornwall_mechanic = {
	clamp_variable = {
		var = Cornwall_Happiness
		min = -20
		max = 10
	}
	if = {
		limit = {
			check_variable = { Cornwall_Happiness > 5 }
		}
		set_variable = { ENG_Cornwall_State = 3 }
	}
	else_if = {
		limit = {
			check_variable = { Cornwall_Happiness > 0 }
		}
		set_variable = { ENG_Cornwall_State = 2 }
	}
	else_if = {
		limit = {
			check_variable = { Cornwall_Happiness > -5 }
		}
		set_variable = { ENG_Cornwall_State = 1 }
	}
	else = {
		set_variable = { ENG_Cornwall_State = 0 }
	}

	add_to_variable = { ENG_Cornwall_Counter = 1 }

	log = "[GetDateText]: [Root.GetName]: ENG_update_cornwall_mechanic; Completed Execution. Current Happiness: [?Cornwall_Happiness]"
	if = {
		limit = { check_variable = { ENG_Cornwall_Counter = 7 } }
		divide_variable = { Cornwall_Happiness = 2 }
		round_variable = Cornwall_Happiness
		divide_variable = { Cornwall_Happiness = 100 }
		if = {
			limit = {
				check_variable = { ENG_Cornwall_State > 1 }
			}
			country_event = {
				id = ENG_Cornwall.5
			}
		}
		else = {
			country_event = {
				id = ENG_Cornwall.4
			}
		}
		log = "[GetDateText]: [Root.GetName]: ENG_update_cornwall_mechanic; All Completed."
	}
}