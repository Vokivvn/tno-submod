#	Various useful scripted effects
#
#
#
#	Moved Laws-related scriptedd effects to TNO_Laws_scripted_effects.txt  -Wendell08

# removes all current ministers (other than intel) for the country in scope - no tooltips displayed
remove_all_ministers = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
	}
}
# changes the government of the country in scope to that of ROOT (the country running the event)

fire_nuclear_war = {
	log = "[GetDateText]: [Root.GetName]: Total Nuclear War Initiating"
	set_variable = { global.world_population_pre = 0 }
	set_variable = { global.world_population_post = 0 }
	set_global_flag = TNO_world_tension_WW3
	TNO_World_Tension_add_100 = yes
	news_event = { id = WORLD.100 hours = 1 }
	ZZZ = {
		add_named_threat = {
			threat = 100
			name = threat.45.t
		}
		set_cosmetic_tag = ZZZ_nuclear
		fire_nukes = yes
		set_global_flag = NUCLEAR_WAR
		country_event = { id = RAD_DBG.0 days = 16 }
		country_event = { id = RAD_DBG.1 days = 20 }
	}
	set_global_flag = TNO_my_world_is_on_fire_how_about_yours
	sound_effect = "tno_se_nuclear_war"
	play_song = "nuke_atmosphere"
	every_country = {
		load_focus_tree = blank_no_tree_apoc
		if = {
			limit = { is_ai = no }
			set_country_flag = big_event_nuclear_war
			ZZZ = {
				change_tag_from = PREV
				set_country_flag = PLAYER_NATION_POSTAPOC
			}
		}
		if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = europe
				}
			}
			set_global_flag = play_RAD_EU_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = north_america
				}
			}
			set_global_flag = play_RAD_NA_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = south_america
				}
			}
			set_global_flag = play_RAD_SA_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = middle_east
				}
			}
			set_global_flag = play_RAD_ME_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = africa
				}
			}
			set_global_flag = play_RAD_AF_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				capital_scope = {
					is_on_continent = asia
				}
				NOT = {
					OR = {
						original_tag = CHI
						
						original_tag = RAJ
						original_tag = BEN
						
						original_tag = VIN
						original_tag = SIA
						original_tag = CAM
						original_tag = LAO
						original_tag = AST
						original_tag = NZL
						original_tag = BUR
						original_tag = PHI
						original_tag = INS
						original_tag = NRB
						original_tag = SYO
						
					}
				}
			}
			set_global_flag = play_RAD_EA_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				original_tag = CHI
			}
			set_global_flag = play_RAD_CH_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				OR = {
					original_tag = RAJ
					original_tag = BEN
				}
			}
			set_global_flag = play_RAD_IN_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				OR = {
					original_tag = VIN
					original_tag = SIA
					original_tag = CAM
					original_tag = LAO
					original_tag = AST
					original_tag = NZL
					original_tag = BUR
					original_tag = PHI
					original_tag = INS
					original_tag = NRB
					original_tag = SYO
				}
			}
			set_global_flag = play_RAD_SEA_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
				is_russian_nation = yes
			}
			set_global_flag = play_RAD_RUS_PostApoc_Events
		}
		else_if = {
			limit = {
				is_ai = no
			}
			set_global_flag = play_RAD_International_PostApoc_Events
		}
		
		# Other special checks
		if = {
			limit = {
				OMS = {	exists = yes }
			}
			set_global_flag = OMS_PostApoc_Event
		}
		if = {
			limit = {
				ORS = { has_country_leader = { name = "Oskar Dirlewanger" ruling_only = yes } }
			}
			set_global_flag = ORS_PostApoc_Event
		}
		if = {
			limit = {
				GER = { has_war_with = RUS }
			}
			set_global_flag = WRW2_PostApoc_Event
		}
		if = {
			limit = {
				USA = { has_country_leader = { name = "Margaret Chase Smith" ruling_only = yes } }
			}
			set_global_flag = USA_MCS_PostApoc_Event
		}
		if = {
			limit = {
				GER = { has_country_leader = { name = "Hermann Göring" ruling_only = yes } }
			}
			set_global_flag = Goering_PostApoc_Event
		}
		if = {
			limit = {
				GER = { has_war_with = USA }
			}
			set_global_flag = USA_GER_WW3_PostApoc_Event
		}
		if = {
			limit = {
				ANG = { has_country_leader = { name = "Wolfgang Schenck" ruling_only = yes } }
			}
			set_global_flag = Schenck_PostApoc_Event
		}
		if = {
			limit = {
				COG = { has_country_leader = { name = "Siegfried Müller" ruling_only = yes } }
			}
			set_global_flag = Muller_PostApoc_Event
		}
	}
}
fire_nukes = {
	country_event = { id = nuclearwar.10 hours = 1 }
	country_event = { id = nuclearwar.11 hours = 2 }
	country_event = { id = nuclearwar.12 hours = 3 }
	country_event = { id = nuclearwar.13 hours = 4 }
	country_event = { id = nuclearwar.14 hours = 5 }
	country_event = { id = nuclearwar.15 hours = 6 }
	country_event = { id = nuclearwar.16 hours = 7 }
	country_event = { id = nuclearwar.17 hours = 8 }
	country_event = { id = nuclearwar.18 hours = 9 }
	country_event = { id = nuclearwar.19 hours = 10 }
	country_event = { id = nuclearwar.101 days = 1 }
}
copy_government_of_ROOT = {
	if = {
		limit = { ROOT = { has_government = communist } }
		set_politics = { ruling_party = communist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = socialist } }
		set_politics = { ruling_party = socialist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = ultranational_socialism } }
		set_politics = { ruling_party = ultranational_socialism elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_democrat } }
		set_politics = { ruling_party = social_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_liberal } }
		set_politics = { ruling_party = social_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = market_liberal } }
		set_politics = { ruling_party = market_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_conservative } }
		set_politics = { ruling_party = social_conservative elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = authoritarian_democrat } }
		set_politics = { ruling_party = authoritarian_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = despotism } }
		set_politics = { ruling_party = despotism elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = fascism } }
		set_politics = { ruling_party = fascism elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = burgundian_system } }
		set_politics = { ruling_party = burgundian_system elections_allowed = no }
	}
}

get_current_government_type = {
	clr_country_flag = was_communist
	clr_country_flag = was_socialist
	clr_country_flag = was_ultranational_socialist
	clr_country_flag = was_social_democrat
	clr_country_flag = was_social_liberal
	clr_country_flag = was_market_liberal
	clr_country_flag = was_social_conservative
	clr_country_flag = was_authoritarian_democrat
	clr_country_flag = was_despotist
	clr_country_flag = was_fascist
	clr_country_flag = was_burgundian_system
	if = {
		limit = { has_government = communist }
		set_country_flag = was_communist
	}
	if = {
		limit = { has_government = socialist }
		set_country_flag = was_socialist
	}
	if = {
		limit = { has_government = ultranational_socialism }
		set_country_flag = was_ultranational_socialist
	}
	if = {
		limit = { has_government = social_democrat }
		set_country_flag = was_social_democrat
	}
	if = {
		limit = { has_government = social_liberal }
		set_country_flag = was_social_liberal
	}
	if = {
		limit = { has_government = market_liberal }
		set_country_flag = was_market_liberal
	}
	if = {
		limit = { has_government = social_conservative }
		set_country_flag = was_social_conservative
	}
	if = {
		limit = { has_government = authoritarian_democrat }
		set_country_flag = was_authoritarian_democrat
	}
	if = {
		limit = { has_government = despotism }
		set_country_flag = was_despotist
	}
	if = {
		limit = { has_government = fascism }
		set_country_flag = was_fascist
	}
	if = {
		limit = { has_government = burgundian_system }
		set_country_flag = was_burgundian_system
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_country_flag = was_communist }
			set_politics = { ruling_party = communist }
		}
		if = {
			limit = { has_country_flag = was_socialist }
			set_politics = { ruling_party = socialist }
		}
		if = {
			limit = { has_country_flag = was_ultranational_socialist }
			set_politics = { ruling_party = ultranational_socialism }
		}
		if = {
			limit = { has_country_flag = was_social_democrat }
			set_politics = { ruling_party = social_democrat }
		}
		if = {
			limit = { has_country_flag = was_social_liberal }
			set_politics = { ruling_party = social_liberal }
		}
		if = {
			limit = { has_country_flag = was_market_liberal }
			set_politics = { ruling_party = market_liberal }
		}
		if = {
			limit = { has_country_flag = was_social_conservative }
			set_politics = { ruling_party = social_conservative }
		}
		if = {
			limit = { has_country_flag = was_authoritarian_democrat }
			set_politics = { ruling_party = authoritarian_democrat }
		}
		if = {
			limit = { has_country_flag = was_despotist }
			set_politics = { ruling_party = despotism }
		}
		if = {
			limit = { has_country_flag = was_fascist }
			set_politics = { ruling_party = fascism }
		}
		if = {
			limit = { has_country_flag = was_burgundian_system }
			set_politics = { ruling_party = burgundian_system }
		}
	}
}

#adjust_research_modifier = {
#    #stolen with approval from Yard1
#	#thanks bb
#    set_temp_variable = { var_research_adjustment_pre_ironclad_temp = 1 }
#    set_variable = { var_research_adjustment_pre_ironclad = 1 }
#    subtract_from_variable = { var_research_adjustment_pre_ironclad = modifier@research_speed_factor }
#    if = {
#        limit = { check_variable = { var_research_adjustment_pre_ironclad = 0 } } # we don't want to divide by 0
#        add_to_variable = { var_research_adjustment_pre_ironclad = 0.001 }
#    }
#    divide_temp_variable = { var_research_adjustment_pre_ironclad_temp = var_research_adjustment_pre_ironclad }
#    set_variable = { var_research_adjustment_pre_ironclad = var_research_adjustment_pre_ironclad_temp }
#    subtract_from_variable = { var_research_adjustment_pre_ironclad = 1 }
#    subtract_from_variable = { var_research_adjustment_pre_ironclad = modifier@research_speed_factor }
#    add_dynamic_modifier = {
#        modifier = research_pre_ironclad_modifier
#    }
#}
#
#adjust_factory_output_modifier = {
#    set_temp_variable = { var_factory_adjustment_temp = 1 }
#    set_variable = { var_factory_adjustment = 1 }
#    subtract_from_variable = { var_factory_adjustment = modifier@industrial_capacity_factory }
#    if = {
#        limit = { check_variable = { var_factory_adjustment = 0 } } # we don't want to divide by 0
#        add_to_variable = { var_factory_adjustment = 0.001 }
#    }
#    divide_temp_variable = { var_factory_adjustment_temp = var_factory_adjustment }
#    set_variable = { var_factory_adjustment = var_factory_adjustment_temp }
#    subtract_from_variable = { var_factory_adjustment = 1 }
#    subtract_from_variable = { var_factory_adjustment = modifier@industrial_capacity_factory }
#    add_dynamic_modifier = {
#        modifier = factory_output_modifier
#    }
#}
#
#adjust_dockyard_output_modifier = {
#    set_temp_variable = { var_dockyard_adjustment_temp = 1 }
#    set_variable = { var_dockyard_adjustment = 1 }
#    subtract_from_variable = { var_dockyard_adjustment = modifier@industrial_capacity_dockyard }
#    if = {
#        limit = { check_variable = { var_dockyard_adjustment = 0 } } # we don't want to divide by 0
#        add_to_variable = { var_dockyard_adjustment = 0.001 }
#    }
#    divide_temp_variable = { var_dockyard_adjustment_temp = var_dockyard_adjustment }
#    set_variable = { var_dockyard_adjustment = var_dockyard_adjustment_temp }
#    subtract_from_variable = { var_dockyard_adjustment = 1 }
#    subtract_from_variable = { var_dockyard_adjustment = modifier@industrial_capacity_dockyard }
#    add_dynamic_modifier = {
#        modifier = dockyard_output_modifier
#    }
#}
#
#adjust_construction_speed_modifier = {
#    set_temp_variable = { var_construction_adjustment_temp = 1 }
#    set_variable = { var_construction_adjustment = 1 }
#    subtract_from_variable = { var_construction_adjustment = modifier@production_speed_buildings_factor }
#    if = {
#        limit = { check_variable = { var_construction_adjustment = 0 } } # we don't want to divide by 0
#        add_to_variable = { var_construction_adjustment = 0.001 }
#    }
#    divide_temp_variable = { var_construction_adjustment_temp = var_construction_adjustment }
#    set_variable = { var_construction_adjustment = var_construction_adjustment_temp }
#    subtract_from_variable = { var_construction_adjustment = 1 }
#    subtract_from_variable = { var_construction_adjustment = modifier@production_speed_buildings_factor }
#    add_dynamic_modifier = {
#        modifier = construction_speed_modifier
#    }
#}

adjust_efficiency_cap_modifier = {
	set_temp_variable = { var_efficiency_cap_adjustment_temp = modifier@production_factory_max_efficiency_factor }
	add_to_temp_variable = { var_efficiency_cap_adjustment_temp = -0.05 }
	set_variable = { var_efficiency_cap_adjustment = 0 }
	subtract_from_variable = { var_efficiency_cap_adjustment = var_efficiency_cap_adjustment_temp }
	add_dynamic_modifier = {
		modifier = efficiency_cap_modifier
	}
}

unite_russia = {
	every_other_country = {
		limit = {
			is_russian_nation = yes
			NOT = {
				is_kazakh_nation = yes
			}
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = russian_total_reunification
}

unite_wrs = {
	every_other_country = {
		limit = {
			OR = {
				is_central_russian_nation = yes
				is_west_siberian_nation = yes
				is_southern_urals_nation = yes
			}
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = russian_reunification
}

unite_siberia = {
	every_other_country = {
		limit = {
			OR = {
				is_central_siberian_nation = yes
				is_far_eastern_nation = yes
				is_wasteland = yes
			}
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = siberian_reunification
}


unite_west_russia = {
	every_other_country = {
		limit = {
			is_central_russian_nation = yes
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = west_russia_reunification
}

unite_west_siberia = {
	every_other_country = {
		limit = {
			is_west_siberian_nation = yes
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = west_siberia_reunification
}

unite_central_siberia = {
	every_other_country = {
		limit = {
			is_central_siberian_nation = yes
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = central_siberia_reunification
}

unite_far_east = {
	every_other_country = {
		limit = {
			OR = {
				is_far_eastern_nation = yes
				is_wasteland = yes
			}
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = far_east_reunification
}

unite_kazakhstan = {
	every_other_country = {
		limit = {
			is_kazakh_nation = yes
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
	activate_decision = kazakhstan_reunification
}

unite_south_urals = {
	every_other_country = {
		limit = {
			is_southern_urals_nation = yes
		}
		PREV = {
			annex_country = {
				target = PREV
				transfer_troops = yes
			}
		}
	}
}

random_get_superreg = {
	if = {
		limit = {
			ROOT = {
				is_central_russian_nation = no
				is_west_siberian_nation = no
			}
		}
		random_country = {
			limit = {
				OR = {
					is_central_russian_nation = yes
					is_west_siberian_nation = yes
				}
				is_russian_unifier = yes
			}
			unite_wrs = yes
		}
	}
	else = { unite_wrs = yes }
	if = {
		limit = {
			ROOT = {
				is_central_siberian_nation = no
				is_far_eastern_nation = no
			}
		}
		random_country = {
			limit = {
				OR = {
					is_central_siberian_nation = yes
					is_far_eastern_nation = yes
				}
				is_russian_unifier = yes
			}
			unite_siberia = yes
		}
	}
	else = { unite_siberia = yes }
}	

random_get_regionals = {
	if = {
		limit = {
			ROOT = { is_central_russian_nation = no }
		}
		random_country = {
			limit = {
				AND = {
					is_central_russian_nation = yes
					is_russian_unifier = yes
				}
			}
			unite_west_russia = yes
		}
	}
	else = { unite_west_russia = yes }
	if = {
		limit = {
			ROOT = { is_west_siberian_nation = no }
		}
		random_country = {
			limit = {
				AND = {
					is_west_siberian_nation = yes
					is_russian_unifier = yes
				}
			}
			unite_west_siberia = yes
		}
	}
	else = { unite_west_siberia = yes }
	if = {
		limit = {
			ROOT = { is_central_siberian_nation = no }
		}
		random_country = {
			limit = {
				AND = {
					is_central_siberian_nation = yes
					is_russian_unifier = yes
				}
			}
			unite_central_siberia = yes
		}
	}
	else = { unite_central_siberia = yes }
	if = {
		limit = {
			ROOT = { is_far_eastern_nation = no }
		}
		random_country = {
			limit = {
				AND = {
					is_far_eastern_nation = yes
					is_russian_unifier = yes
				}
			}
			unite_far_east = yes
		}
	}
	else = { unite_far_east = yes }
	if = {
		limit = {
			ROOT = { is_kazakh_nation = no }
		}
		random_country = {
			limit = {
				AND = {
					is_kazakh_nation = yes
					is_kazakh_unifier = yes
				}
			}
			unite_kazakhstan = yes
		}
	}
	else = { unite_kazakhstan = yes }
}

TNO_div_limiter_calculate_unit_cap = {
	set_variable = { TNOLimiterIndustry = num_of_military_factories }
	multiply_variable = { TNOLimiterIndustry = 1.5 }
	add_to_variable = { TNOLimiterIndustry = DivLimiterEscalatorPerm }
	if = {  #Caps unit production based on milfacs
		limit = {
			has_war = no
			OR = {
				check_variable = { num_divisions > TNOLimiterIndustry }
				check_variable = { num_divisions = TNOLimiterIndustry }
			}
		}
		set_country_flag = TNO_DIVISIONS_CAPPED
	}
	if = {
		limit = {
			check_variable = { num_divisions < TNOLimiterIndustry }
			has_country_flag = TNO_DIVISIONS_CAPPED
		}
		clr_country_flag = TNO_DIVISIONS_CAPPED
	}
}

TNO_div_limiter_escalator_mechanism_run = {
	THIS = {
		set_variable = { DivLimiterEscalatorPerm = 1.1 }
		every_neighbor_country = {
			if = {
				limit = {
					check_variable = { THIS.num_divisions > THIS.TNOLimiterIndustry }
				}
				set_variable = { THIS.DivLimiterEscalator = THIS.num_divisions }
				divide_variable = { THIS.DivLimiterEscalator = THIS.TNOLimiterIndustry }
			}
			if = {
				limit = {
					check_variable = { THIS.num_divisions < THIS.TNOLimiterIndustry }
				}
				set_variable = { THIS.DivLimiterEscalator = THIS.num_divisions }
				divide_variable = { THIS.DivLimiterEscalator = THIS.TNOLimiterIndustry }
			}
			multiply_variable = { PREV.DivLimiterEscalatorPerm = THIS.DivLimiterEscalator }
		}
		log = "[GetDateText]: [THIS.GetName]: ran Division Limiter Escalator script - current temp escalator value is [?DivLimiterEscalator] - current permanent escalator value is [?DivLimiterEscalatorPerm] - current limiter value is [?TNOLimiterIndustry]"
	}
}

TNO_cancel_border_war_country_scope = {
	every_owned_state = {
		limit = {
			has_border_war = yes
		}
		every_neighbor_state = {
			limit = {
				has_border_war = yes
			}
			if = {
				limit = {
					has_border_war_between = {
						attacker = THIS
						defender = PREV
					}
				}
				cancel_border_war = {
					dont_fire_events = yes
					defender = PREV
					attacker = THIS
				}
				log = "[GetDateText]: [Root.GetName]: ABORTED BORDER WAR BETWEEN [THIS.GetName] AND [PREV.GetName]"
			}
			if = {
				limit = {
					has_border_war_between = {
						attacker = PREV
						defender = THIS
					}
				}
				cancel_border_war = {
					dont_fire_events = yes
					defender = THIS
					attacker = PREV
				}
				log = "[GetDateText]: [Root.GetName]: ABORTED BORDER WAR BETWEEN [PREV.GetName] AND [THIS.GetName]"
			}
		}
	}
}

TNO_cancel_border_war_state_scope = {
	every_neighbor_state = {
		limit = {
			has_border_war = yes
		}
		if = {
			limit = {
				has_border_war_between = {
					attacker = THIS
					defender = PREV
				}
			}
			cancel_border_war = {
				dont_fire_events = yes
				defender = PREV
				attacker = THIS
			}
			log = "[GetDateText]: [Root.GetName]: ABORTED BORDER WAR BETWEEN [THIS.GetName] AND [PREV.GetName]"
		}
		if = {
			limit = {
				has_border_war_between = {
					attacker = PREV
					defender = THIS
				}
			}
			cancel_border_war = {
				dont_fire_events = yes
				defender = THIS
				attacker = PREV
			}
			log = "[GetDateText]: [Root.GetName]: ABORTED BORDER WAR BETWEEN [PREV.GetName] AND [THIS.GetName]"
		}
	}
}

# Puppeting a country completly fucks up party popularities, thanks PDX
# Use both effects on the same scope
save_party_popularities = { # Use this before puppeting
	log = "[GetDateText]: [THIS.GetName]: Running save_party_popularities command"
	add_to_array = { PartyPops = party_popularity@communist }
	add_to_array = { PartyPops = party_popularity@socialist }
	add_to_array = { PartyPops = party_popularity@social_democrat }
	add_to_array = { PartyPops = party_popularity@social_liberal }
	add_to_array = { PartyPops = party_popularity@market_liberal }
	add_to_array = { PartyPops = party_popularity@social_conservative }
	add_to_array = { PartyPops = party_popularity@authoritarian_democrat }
	add_to_array = { PartyPops = party_popularity@despotism }
	add_to_array = { PartyPops = party_popularity@fascism }
	add_to_array = { PartyPops = party_popularity@national_socialism }
	add_to_array = { PartyPops = party_popularity@ultranational_socialism }
	add_to_array = { PartyPops = party_popularity@burgundian_system }

	for_each_loop = {
		array = PartyPops
		multiply_variable = { PartyPops^i = 100 }
		round_variable = PartyPops^i
		add_to_temp_variable = { PartyPopTotal = PartyPops^i }
	}

	if = {
		limit = { check_variable = { PartyPopTotal > 100 } }
		subtract_from_temp_variable = { PartyPopTotal = 100 }
		log = "[GetDateText]: [THIS.GetName]: PartyPop value exceeds 100 - [?PartyPopTotal]"
		for_each_loop = {
			array = PartyPop
			if = {
				limit = { check_variable = { PartyPop^i > PartyPopTotal } }
				subtract_from_variable = { PartyPop^i = PartyPopTotal }
				add_to_temp_variable = { break = 1 }
			}
		}
	}
	else_if = {
		limit = { check_variable = { PartyPopTotal < 100 } }
		subtract_from_temp_variable = { PartyPopTotal = 100 }
		multiply_temp_variable = { PartyPopTotal = -1 }
		log = "[GetDateText]: [THIS.GetName]: PartyPop value is less than 100 - [?PartyPopTotal]"
		set_temp_variable = { a = 0 }
		randomize_temp_variable = {
			var = a
			distribution = uniform
			min = 0
			max = 11
		}
		round_temp_variable = a
		add_to_variable = { PartyPop^a = PartyPopTotal }
	}
}

apply_party_popularities = { # Use this after puppeting
	hidden_effect = {
		set_popularities = {
			communist = PartyPops^0
			socialist = PartyPops^1
			social_democrat = PartyPops^2
			social_liberal = PartyPops^3
			market_liberal = PartyPops^4
			social_conservative = PartyPops^5
			authoritarian_democrat = PartyPops^6
			despotism = PartyPops^7
			fascism = PartyPops^8
			national_socialism = PartyPops^9
			ultranational_socialism = PartyPops^10
			burgundian_system = PartyPops^11
		}
		clear_array = PartyPops
	}
}

# Oil Crisis modifier stuff
TNO_Oil_Crisis_apply_modifier = {
	log = "[GetDateText]: [Root.GetName]: add dynamic modifier TNO_Oil_Crisis"
	hidden_effect = {
		add_ideas = TNO_Oil_Crisis # Cmon PDX, is it that hard to let people put in descriptions on dynamic modifiers?
		add_dynamic_modifier = { modifier = TNO_Oil_Crisis_dynamic_modifier }
	}
	set_variable = { OC_fuel_gain_factor = -0.4 }
	set_variable = { OC_production_oil_factor = -0.5 }
	set_variable = { OC_political_power_factor = -0.25 }
	set_variable = { OC_stability_factor = -0.15 }
	set_variable = { OC_production_speed_buildings_factor = -0.35 }
	set_variable = { OC_consumer_goods_factor = 0.25 }
	set_variable = { OC_industrial_capacity_factory = -0.1 }
	set_variable = { OC_industrial_capacity_dockyard = -0.1 }
	set_variable = { OC_trade_opinion_factor = -0.5 }
	set_variable = { OC_annual_gdp_growth_factor = -0.25 }
	set_variable = { OC_proportional_gdp_cost = 0.08 }
	set_variable = { OC_personnel_cost_modifier = 0.25 }
}

TNO_Oil_Crisis_reduce_effects = { # Can be fired up to 5 times until the OC modifier is removed
	log = "[GetDateText]: [Root.GetName]: TNO_Oil_Crisis effects reduced ([?OC_dynamic_modifier_counter])"
	if = {
		limit = { 
			NOT = {tag = IBR}
			check_variable = { OC_dynamic_modifier_counter < 4 }
			}
		custom_effect_tooltip = TNO_Oil_Crisis_reduce_effects_tooltip
	}
	else_if = {
		limit = {
			NOT = {tag = IBR}
			check_variable = { OC_dynamic_modifier_counter = 4 }
			}
		custom_effect_tooltip = TNO_Oil_Crisis_remove_modifier_tooltip
	}
	add_to_variable = { OC_fuel_gain_factor = 0.08 }
	add_to_variable = { OC_production_oil_factor = 0.1 }
	add_to_variable = { OC_political_power_factor = 0.05 }
	add_to_variable = { OC_stability_factor = 0.03 }
	add_to_variable = { OC_production_speed_buildings_factor = 0.07 }
	add_to_variable = { OC_consumer_goods_factor = -0.05 }
	add_to_variable = { OC_industrial_capacity_factory = 0.02 }
	add_to_variable = { OC_industrial_capacity_dockyard = 0.02 }
	add_to_variable = { OC_trade_opinion_factor = 0.1 }

	add_to_variable = { OC_dynamic_modifier_counter = 1 } # Counter for the number of times this effect has been called
	if = { # Once it hits five, remove the dynamic effect and clear the variables
		limit = {
			check_variable = { OC_dynamic_modifier_counter = 5 }
		}
		TNO_Oil_Crisis_remove_modifier = yes
		clear_variable = OC_dynamic_modifier_counter
	}
}

TNO_Oil_Crisis_remove_modifier = {
	log = "[GetDateText]: [Root.GetName]: remove dynamic modifier TNO_Oil_Crisis"
	custom_effect_tooltip = TNO_Oil_Crisis_remove_modifier_tooltip
	hidden_effect = {
		remove_ideas = TNO_Oil_Crisis
		remove_dynamic_modifier = { modifier = TNO_Oil_Crisis_dynamic_modifier }
	}
	clear_variable = OC_fuel_gain_factor
	clear_variable = OC_production_oil_factor
	clear_variable = OC_political_power_factor
	clear_variable = OC_stability_factor
	clear_variable = OC_production_speed_buildings_factor
	clear_variable = OC_consumer_goods_factor
	clear_variable = OC_industrial_capacity_factory
	clear_variable = OC_industrial_capacity_dockyard
	clear_variable = OC_trade_opinion_factor
	clear_variable = OC_annual_gdp_growth_factor
	clear_variable = OC_proportional_gdp_cost
	clear_variable = OC_personnel_cost_modifier
}

TNO_Oil_Crisis_reduce_effects_USA = { # USA unique : only gives pp and stab back (mostly)
	log = "[GetDateText]: [Root.GetName]: TNO_Oil_Crisis effects reduced ([?OC_dynamic_modifier_counter])"
	custom_effect_tooltip = TNO_Oil_Crisis_reduce_effects_tooltip
	if = {
		limit = { check_variable = { OC_dynamic_modifier_counter_USA < 4 } }

		add_to_variable = { OC_political_power_factor = 0.05 }
		add_to_variable = { OC_stability_factor = 0.03 }

		add_to_variable = { OC_dynamic_modifier_counter_USA = 1 } # Counter for the number of times this effect has been called
	}
	else_if = { # Once it hits five, remove the dynamic effect and clear the variables
		limit = { check_variable = { OC_dynamic_modifier_counter_USA = 4 } }

		clear_variable = OC_dynamic_modifier_counter_USA

		add_to_variable = { OC_fuel_gain_factor = 0.16 }
		add_to_variable = { OC_production_oil_factor = 0.2 }
		add_to_variable = { OC_political_power_factor = 0.05 }
		add_to_variable = { OC_stability_factor = 0.03 }
		add_to_variable = { OC_production_speed_buildings_factor = 0.14 }
		add_to_variable = { OC_consumer_goods_factor = -0.1 }
		add_to_variable = { OC_industrial_capacity_factory = 0.04 }
		add_to_variable = { OC_industrial_capacity_dockyard = 0.04 }
		add_to_variable = { OC_trade_opinion_factor = 0.2 }
	}
}

remove_faction_status = {
	hidden_effect = {
		remove_ideas = {
			Pakt_Leader
			Pakt_Military_Authority
			Pakt_Protektorat
			Pakt_Integrated_Reichskommissariat
			Pakt_Autonomous_Reichskommissariat
			Pakt_Reichsland
			Pakt_Marionettenstaat
			Pakt_Mitstreiter
			Pakt_Bundnispartner
			Pakt_Ordensstaat
			Pakt_Observer
			Anti_Heydrich_Pact
			Sphere_Leader
			Sphere_Special_Econ_Zone
			Sphere_Imp_Protectorate
			Sphere_Fully_Dependent
			Sphere_Economic_Dependent
			Sphere_Coequal
			OFN_Leader_of_The_Free_World
			OFN_Independent_Member
			OFN_Dependent_Member
			OFN_Military_Government
			OFN_Mandate
			TRI_Founder_IT
			TRI_Founder_IB
			TRI_Founder_TR
			TRI_Member
			TRI_Member_Client
		}
	}
}